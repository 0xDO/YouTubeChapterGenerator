Hey everyone, David Shapiro here with a new kind of video. I'm going to try something I've had this idea for a while – I've had this idea of doing a working session and walking you through my entire process. Sometimes people don't really believe me when I tell them how fast I work or how easy this stuff is, so I thought I'd just record it end-to-end and show you the project today.

Someone said "nicevid" – so this is my co-writing flash fiction with GPT3. Let me zoom in a little bit – he says "nicevid" and the character dialog one. I'm curious if you've tried using GPT3 to generate a high level logical plot summary where you prompt for a structure – for a structure like setup, incident, an inciting incident, midpoint, false high, etc. etc. In my experiments it is too extensive prompt chaining – perhaps that's because it's a more complex task.

I say I tried that with my Auto Muse project and it was not great at it. However, this is something that could be fine-tuned so that it works better. So that gave me an idea – let me do an outline generator.

So I just created this repo here – this is the repo. And I've added a couple files – I just added my API key and a boilerplate thing. So let me just show you – I'll do a "cd" into the "outline generator" and do a "get status", "get add", "git commit –am 'initial commit'", and then "get push".

Okay, so you will see I just did a push – there's only a handful of files in here. Let's get started.

Okay, so the first thing to do with this is go to the playground. Let's go to "textdavinci.com" – so the very first thing, let me zoom back in here, is we need some raw data to work with. So we're going to synthesize some data.

So the first thing is let's just right off the cuff – let's see if this prompt works. We'll write a detailed – no, not right. Imagine, no, brainstorm – there we go. "Brainstorm a plot synopsis for a random story". Let's say "detailed plot synopsis" – and let's just see what that does.

"The town of Shepherdstown is a historic small town located in the Appalachian mountains of West Virginia. The town is home to a variety of shops and businesses, as well as a number of different families. The McBride family has lived in Shepherdstown for generations and they own a large farm on the outskirts of town. The youngest McBride daughter, Lizzie, is a free-spirited 18 year old who has always been drawn to the town's history. She loves to explore the old buildings and learn about the town's past.

One day, Lizzie discovers a hidden room in one of the buildings. The room is filled with dusty old boxes and furniture. Lizzie starts to explore and she finds a secret passage that leads to a hidden staircase. She climbs the staircase to find herself in a secret attic. The attic is filled with old clothes, furniture, and books. Lizzie starts to look through the books and she finds an old journal. The journal is filled with the handwritten accounts of the town's history. Lizzie is fascinated by the journal and decides to start her own research project on the town's history. She spends the summer exploring the town's past and learning about its fascinating history."

Okay, so we've got an initial prompt. So let's go ahead and just save this – we'll call this "prompt_premise.txt". And so then what I do is I've got this script that I'm starting – let's change this to "textdavinci.com". And we'll use the same – the same settings. So no frequency penalty, no presence penalty. I'll leave these the stops – actually, I'll just remove those because they are not relevant to this project. Okay, I think that's all we need. So go with pep8 – two new lines beneath each one.

Okay, so this is a function that I copy paste in all my projects. Some people have noticed that that every now and then your your prompt will fail or your completion will fail. So I just have a retry built in – it rarely needs that, especially nowadays. I think they've upped their capacity, but basically I just say like, "Oh, I need to import sleep as well", from "time import sleep". So basically it'll just wait a second and then try again in case it fails to talk to openai.

Okay, so for this, since I like the prompt, let's do "if name equals main". And this is not strictly required for this – just because it's prototyping, I could just jump straight into a loop. However, this is good practice to do if you want to call this from something else. I'm not going to do that since I just do imperative programming and rapid prototyping. But I just got in the habit and I like it because it just says, "Okay, let's demarcate this".

Okay, let's see. For "i" in range – let's see, 0 to 10. Let's just do 10 for now. Let's see, premise equals – gpt3 completion. Prompt equals "08. prompt equals need to load the file". So I'll just copy this. With open – and what did I call it? "Prompt_premise" because I will use different prompts in the future as well. So we'll say "prompt equals infile.read".

Oh, and another thing I forgot is what I do is I grab the output and I strip it so that removes all white space on from the edges. And then I also do a regex swap replace for any any additional white space and just replace it with an individual space. So in this case, if it adds too much vertical space, like new lines, I want to remove all the new lines just so it ends up with a single block of text, like you see here. It's it's not always necessary, but sometimes GPT3 will spit out too much too much vertical white space and I want to condense it. So that's why I have this little bit here.

And that actually reminds me – I need to also import "regex". Okay, so "premise equals gpt3 completion". Prompt – so that'll pass in the prompt. I've got the engine set to default to "textdavinci.com". I've got "tokens=500" just in case it gets cut off. But you see how it's already completed the first sentence. So that's looking good.

And so then what I do is I just take this – I just take this output and I just copy it into my text editor. And then I just start writing from there. So that's the workflow. And you can see how fast this is. And so that's the project for today. I'm going to continue to work on this and try to improve it. But I just wanted to show you the idea and how it works.

So thanks for watching and I'll talk to you soon.

The instructions for using the text davinci o2 are very short because the tool is quite user-friendly. However, I encountered some errors when trying to generate synthetic data.

I first forgot to install the open ai module, which caused an error when I tried to run the script. After installing the module, I tried again and got an error about an incomplete format. I realized I had made a mistake in the code and fixed it.

Finally, I was able to generate some premises, but they were very repetitive. I think this is due to the small amount of data I supplied. To fix this, I will generate premises for multiple genres of stories and combine them. This should give a more varied set of results.

To have a first thing something that kind of stands before generating a premise, okay? So generate a list of random characters, locations, and genres, then we'll just do a dash there- giraffe, lighthouse, comedy, okay? Well, that's interesting. Um, uh, let's say long list and see what that does, because a giraffe, lighthouse comedy, that's not helpful. Um, oh random characters. Let's see. So we need to tell it for a story. Um, this is for brainstorming a story. Generate a long list of random characters, locations, and genres. There we go. Oh, good, good, good, good.

Okay, so here's what happens. It gives us some random stuff. Um, let's run this a couple times to see if it gives us similar things, because like a group of friends who get stranded on a desert island camping trip in the woods. Let's see if it's repetitive again. A family who owns a farm group of students, okay, yeah, this is this is okay. This is a little bit more random. Um, run it a few more times. Skilled archer town that is terrorized by a band of robbers, dark forest. Oh, this is great. A final battle between good and evil. Wonderful. Um, okay, so here's what we're going to do. We are going to create another prompt that stands before the first one, because we saw that it was being way too repetitive. Okay, um, let's call this prompt brainstorming brainstorm.

Okay, so first we're going to do that. And then ooh, ooh, I'm gonna need to change this, because we don't want we want to actually split the lines, yeah. Okay, so we'll need to change a couple things. Let's see how should I approach this? I think I'm just going to need to take this out, because we want to maintain the lines. And we will say, I don't want to waste too many tokens. Um, actually, let's simplify this, because I don't need multiple outputs. I need just one. Generate a list. Um, generate a list of well, no, because having a list output allows it to be more creative, because there will be some slight variances. Oh, also, oh, I wonder if I could fix this just by turning up the temperature. Let's go back before we get too carried away. Let's turn up the temperature a little to 1.0, because this can go up to this can go up to two. Okay, before before we get too carried away with over solutioning it, let's try simple things. So over here we've got seven romances, looking at the console output. Most of them involve Jenna. Most of them involve the weekend at a beach house. So all right, let's see if we can restart this and we get a better um, better set of outputs. Um, let's see. Let's go back here. Python generate premises. All right. So all I did was I changed the temperature from 0.7 to 1.0. Um, so let's see if we get that repetitiveness again. Jenna is looking forward to her evening run. Okay, that's a little bit better. Jenna and ryan hit it off. Tamara is a successful businesswoman who seems to have it all. She's beautiful and smart. Great. Starting to get some variety. Oh, but you see how we're getting some some more vertical white space that I don't like. Hannah sets cross country road trip. Good. Linda's high powered executive. Yeah, okay, this is getting better. So the simple thing is the better thing. All I had to do is turn up the temperature. Let's add the canceling the white space. Add that back in. That's fine for now. Jenny is a young woman who is struggling to find her place in the world. Good. Rachel is a successful young one. Notice how all the romances start with with a woman. Um falls in love with luke who learns to trust again. Sherry had always been a hopeless romantic. So here's what I'll do. I'll wait for this to get to about um, like 20 or so or 25 rather, and then I'll change the prompt. Actually, no, I don't need to stop it. All I need to do is change the prompt. Um, so we'll go to this. So this is this is one advantage. Actually, no, that won't work, because I only load the prompt once. Um, yeah. So for every iteration, if I move this up into the into the loop, then I could just change the prompt mid flight. So actually, let's do that. Um, so let's do that. Put that here. So now, while it's iterating, I can change the prompt mid-flight without having to cancel it. Um, that'll be nice.

Long day of work to her loving fiance, miles. Um, jenna and the stranger. When olivia's mom dies, she's left to fend for herself. Um, so this is all this is all very like anglo-centric. These are all like typical, pretty much typically American names. These aren't even like european names. Um, so let me go ahead and pause this now and let's add a little bit of variety. But first we're going to want to change where it starts. Okay, so we're at 16. So let's go here and we'll start um we'll go we'll start at 17 and we'll go up to uh let's see. Let's we'll just go up to 30. and then we'll change this to uh let's close that one. So I stopped clicking on it. Um, for brainstorm a detailed plot synopsis for a random romance. Let's say europe. No, let's say french romance story. Um, and watch how much just one word changes this output. And let's see make sure that I change the where it starts. So it'll go from 17 to 30. uh, okay, that'll be fine.

Okay, so because basically what we're doing now is we're um, elise there we go, dashing parisian gentleman pierre. Oh, wonderful. Um, okay, so what we're doing is we're generating synthetic data right now. So ultimately this will be the input that we use in the future. Why is it paused? There we go. Oh, wow, that's a much longer one. Excellent. Um, so you know we got 17 like you know, white bred american um, premise romance plots. Um, and we're gonna use those to generate um, like a three-act structure in a little bit. Um, but we want variety, right? We don't want just anglo-centric american stories. We want a variety. So um, oh look at that name, antoinette gautier. Ha, love this. Meets brooding so there's another problem. Um meats breeding artist cloud monet. Oh, wow, look at that. Look at that. This is great. Okay, sorry, I'm just really happy really excited about this. The goal the reason why they're numbered is because we got to get up to 200 total. Um, so 200 total, that's going to be enough for us to uh for us to um, what am I

Trying to say sorry. I'm thinking really fast and my mouth can't keep up.

We need to get a minimum of 200 samples in order to fine tune a model that is open ai's recommended um kind of baseline minimum okay pardon me i have to check um i have to check something okay sorry about that pause um but i think that's fine for you guys as watching the video just skipped ahead okay so now we've got um 30 uh well zero one one through 29 um premises um just scrolling up here.

Francois is a young woman who lives in paris with her husband. Um oh that looks like that repeated that's okay it's okay if we get some repetition.

So what have we learned so far? We've learned to turn the temperature up a little bit. Let's go up a little bit higher next time just to see. Um it can start to go off the rails so that's why i have the the console output just so i can see what what's doing um as i'm generating this data.

But already i've got about you know what is this 30 items um how much data is this this is 24 kilobytes of data um that i didn't have to write. All i did was tell the machine what i wanted it to do.

All right so first let's update our starting point so we'll go from 30 to 45. We'll just do 15. And let's do a bollywood romance story. Um and this is going to take a while but i will explain stuff to you um as we go and if it gets too boring i'll pause the video so it'll just skip ahead so don't worry if i if i pause the video and it skips ahead it's just because i'm letting some of this process finish.

Okay so let's do the generate premises but we change the prompt to bollywood romance and we've got the prompt premise and now the output is still premise romance and we're doing from number 30 to 45.

Okay let's go let's see what happens let's see how these go.

Ria and raj have been married for five years. They have a two-year-old daughter. Look at this they moved to mumbai oh man this is wonderful um it's so creative and look how fast it's spitting this stuff out i could never i could never write this fast no human could no 10 people could so i'm just churning out um looks like it is a little repetitive raj and simran of course it could be that raj is a common name um i i i work with a lot of indian folks and i know that there are some common names like my name is dave that's freaking common right so like i know that like karthik and satish are ultra common names in uh in india um raul there's another common one so yeah it looks like having the temperature a little bit higher is good i'm not seeing repetitive patterns in here even the names are often unique that's good.

Okay so while this is running let's see what are we up to 36 so we've got about 10 more let's grab one of these oops if i know where i'm going okay so let's grab this and and start start figuring out um let's see um construct that's a good one construct a three act structure for the following yeah sure grammarly is like the most nagging grammar teacher ever but it helps me be a better writer also speaking of between gpt3 and grammarly you combine those two you're an unstoppable writer you can produce content so fast construct a three act structure for the following um story premise um each each act should have a brief description one to two sentences okay premise so we'll do a premise there and now we'll do um three act structure act one all right let's see what this does it might just be all right let's see how this compares all right i guess i have to read it all out okay it all begins with samir a young man from a wealthy family meets naina a simple girl from a small village nina has come to the city to make a better life for herself she is immediately attracted to samir but is too shy to say anything oh a shy girl story um one day out of the blue samir expresses his feelings for naina and confesses his love for her nyena is overjoyed and eagerly accepts his proposal they begin to date and their families approve of the match however just as things seem to be going well samir smears father suddenly dies interesting leaving him the sole heir to the family business samir is forced to take on a lot of responsibility and doesn't have much time for naina oh oh man this is a good story i want to watch this movie uh naena begins to feel neglected and wonders if samir is really the man she thought he was um samir is soon caught in a world of money and power and nina feels like she is losing him one day she decides to go back to her village leaving samir behind samir realizes how much he loves nina and how much he has been neglecting her he decides to go to her village and confess his love nina is hesitant but eventually agrees to give him another chance they share a passionate embrace in their families rejoice at the news of their reunion oh man i can imagine so much song and dance in this bollywood picture okay so let's see how that has translated to a three-act structure act one um she's immediately attracted okay out of the blue it almost looks like it's just okay it's just splitting it up um this is not this is okay um break the following um uh following premise down into a list of major plot points use the save the cat model for screenplays okay so then let's try this again save the cat plot point one okay let's see what happens [Music] i don't like it it's not working hmm okay so this is where we have to get more and more creative because it's just regurgitating it and that's not exactly what i want and i want to avoid doing a doing a few shot example here let's break this down even simpler write a scene write the opening scene for the following no we we really do need an outline um let's see what was it translate or rewrite rewrite this the following premise into an outline outline all right let's see if this works so again i don't know what i'm doing here i'm just experimenting rapid iteration okay again it's just their families rejoice i guess this is okay because then this we can break each of these points down into we can break them down further um

Raj and Priya are in love. Priya is a painter, and Raj is a werewolf. They must find a way to be together while dealing with the challenges of their respective worlds.

Jenna is looking forward to the weekend. She wakes up from a car accident to find that she is now a vampire. Jenna must learn to navigate her new life while keeping her secret safe from those who would do her harm.

The human race has all but wiped out a race of advanced aliens. As the last remaining members of their race, they must find a way to survive and take revenge on the humans who have wronged them.

Jeff is an unlikely hero. A portly space trader in a galaxy far, far away, he finds himself thrust into an adventure when he discovers that a young farmer is really a princess who has been kidnapped by an evil queen. In order to save her, Jeff must venture into a dangerous kingdom and defeat the queen.

In this video, we'll take a look at how to use the script premise line to generate new scripts from scratch. First, we'll grab the premise and change the file name to "script." Then, we'll copy and paste this line into a new file called "outfile." Next, we'll do a quick test with Python to generate one script. If everything looks good, we'll pause the video and let the script generate 200 scripts. Finally, we'll use the "fine tune" model to upload the file and train the model.

In this video, I'll show you how to use the Fine Tune List feature in Openai. This will allow you to fine tune your models for specific purposes.

First, I'll comment out the last two lines of code. Then, I'll run the Fine Tune List command. This will take a while, so I'll pause the video and come back when it's done.

When the Fine Tune List is finished, you'll see a list of all the fine tuned models under your engines. Each model will have a name and a tag. The name is the original name of the model, and the tag is the name you gave it.

I've named my model "scripts" and tagged it "eve". Once the model is loaded, you can use it to generate a script for a movie.

To do this, first brainstorm a premise for your story. Then, enter the premise into the Fine Tune List. The model will generate a script for you.

Fade in.

Lily's house. Day.

A young girl of about 10 is playing in her backyard with her dog, a small terrier. She's laughing and having a good time.

Suddenly, she stops and looks around.

"Mama? Papa?" There is no answer.

The little girl starts to get scared.

Suddenly, two men appear. They chase after Lily, grabbing her.

There you have it! You can use this feature to generate a script for your own movie.