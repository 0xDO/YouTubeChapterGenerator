good morning it is a good day to be in AI so let's go ahead and dive right into today's uh standup meeting or scrum for the open AI agent swarm so I have an idea so I want to provide a little bit of context and I want to let you know that this is just an idea it's an experiment we'll see how it goes but the the uh my hierarchical autonomous agent swarm idea has garnered a tremendous amount of attention uh as well as a lot of very Lively discussion and desire to contribute so what I'm going to try and do is steer the ship uh from the perspective of a just really short uh cycle and experiment I don't think this project is going to live too long because I think you guys are getting it so basically there's just a few ground uh points that we want to try and figure out and I've got two of them defined and I'll go over them in the video but what I wanted to do today or first is just provide a little bit of context so that you understand why things are organized the way that they are so first here's the here's the overall repository in a day we've had 160 Stars uh and 27 Forks um and so it's it's popping um so uh quick recap in case you're new to the project this is my idea of the hierarchical autonomous agent swarm uh from open Ai and so the idea is because we can now instantiate agents via API and we kind of have this all-in-one Source this this single stop single shop stop to run agents in the cloud uh the idea is maybe we can use this to create agents that create other agents but then how do you know how to do that so there's a hierarchy so the at the highest end of the hierarchy is the Supreme oversight board which is a set of agents that are going to debate morality ethics mission that sort of thing and they are one that's one of their functions they debate what to do but then they also have the ability to create other agents and likewise so on and so forth down the chain it's all documented minute here I've got it all written out and so that's that's the number one thing next thing that I want to point you to is contributing so I updated the contributing document so before you jump in at all make sure you take a look at this document I've kept it short and sweet so you know the contribution workflow number one watch the latest video so um I'll probably have a discussion thread or you'll probably see it on YouTube so but this will basically be like the daily update of where we're at and what we need to do next so I'm going to try serve as product owner and scrum Master we'll see if it works but like I said I don't expect this project to live too long because I think once we get the ideas you guys will will be able to take it and run with it so I don't need to own the thing forever like obviously like the scope of this is way bigger than uh than I can do myself or that an open source developed and public team can do um so like I said the whole idea is just over the next week or two let's see if we can get if we can lay the groundwork and solve some of the basic problems and then the rest of you can just take it and go and be free and so on and so forth um so watch the video as you're doing right now number two discuss on the discussion tabs which I'll show you show you in a second number three if there's a problem if there's a bug or a problem create an issue um don't open it into discussions I already I've seen a few people um complain about code bugs don't put that in the discussions that's not what it's for um put it in put it at as as an issue which is right up here um and then number four is submit a PR so once you've watched the video once you've read the discussions make sure you submit a PR or a poll request um you can also just create a main fork or and and work on it on your own um I there's been a few people that have like posted really long conversations and debugs please don't do that please post a link to your own Fork um that will keep the discussions a little bit cleaner and easier um so then in terms of uh ground rules like like code of conduct stay on topic there's already been a few people that are trying to change the scope of the project that are adding uh Superfluous information so those those topics have been closed we want to keep this nice and tight and lean so anything that is off topic or not relevant will be closed um and then the other thing is adhere to the C3PO policy so this is collaborative culture Community policy zero tolerance for harm and wasting time so if you if before you contribute ask yourself is this harmful or is it wasting time if I if either is is yes or maybe don't post it um this is how I keep how I run a tight ship in the comment section and everything else uh and then finally the pr requirements uh pretty simple clear description limit limit PRS to one big one per day U make sure that your your poll request aderes to the current uh style and structure of the of the thing um if you're not clear um then again like make sure you check because this is this this project is going to be moving quickly and we're going to have multiple people uh contributing in and submitting uh poll requests I will take a look at any serious poll request um and I'll provide you feedback so like if it doesn't adhere to the right style or if it's trying to change the scope I'll let you know and say like hey go change this and then and then resubmit um and we should be good there okay so that's the project at a high level so now let's jump into the discussions so like I said I'm going to keep the disc discussions nice and trim and so we've had a few conversations uh so far um I've provided some feedback uh trying to keep everything aligned so like for instance this was a really good question how do you how do you maintain alignment on the Supreme oversight board I provided some some feedback there there's like I said there's been a couple conversations that were off topic so I close those just because we want to keep the noise to a minimum um but yeah so jump in here there's been no issues submitted yet we've had a couple of successful poll requ quests um one they closed on their own and then uh two have been merged um so that's that and I think I think uh we're ready to just dive into the code so let me show you where we're at so there's two there's two overarching functions that we need to figure out once we can figure out these functions and bake them into agents the rest is a matter of experimentation and there and that's not to say that there aren't other problems to solve because communication between agents is going to be probably the hardest thing uh which is like how do they talk to each other how do we host the chat rooms do we use uh amqp message cues do we use something else do we use CIS log I don't know do we spool up containers we'll have to figure that out um but all the data all the thoughts are going to need to be stored and retrieved somewhere um so if you have any thoughts about that please jump in the discussions um in the Ace framework team we realized that that communication between agents or between layers is is actually like conceptually the hardest problem to solve building agents is easy that's the easiest part the hardest part is who's talking to who how much how often who gets to hear what and and all those communication channels so if you have any ideas please let us know in the discussion um and we'll be happy to look at your suggestions because like I said that's the hardest thing so the first function though is the agent Builder so we have we have greatly expanded this I added a read me kind of telling you a very high level overview of what the agent Builder is so at the highest level uh the primary thing we need to do is figure out agents that build agents in a structured hierarchical manner so here's some of the thoughts that I've had uh a lot of this is based on feedback from the comments in yesterday's video as well as the discussions and uh on on um GitHub as well as Discord uh so then you know there's three primary parameters there's instructions functions and file retrieval there's there's a lot to unpack with each of those so I unpack a little bit like what goes into the instruction so you need an archetype or a Persona you need a context and a mission um at a at a bare minimum and then the functions there's all kinds of functions that we can add so this is for function calling or tools so there's internal there's two two primary dispositions for a function there's internal which is something that the agent can do internally um such as an internal data tool or an internal coding tool um and then there's external tools which is making calls to other things uh whether that's you know a cloud platform or a data broker or a solar thing o I just had an Insight what if we used like we8 or or um or pine cone as an external data broker um in order to organize all the messages because then you can use metadata to say who has access to what oh I like this okay so if we have any pine cone experts in the audience and I know some of you people from Pine Cone watch this uh let's see if we can figure out using that as like an external brain or an external uh way of managing all of the communication that could be cool because the vector search is Fast and the metadata allows for filtering so like the metadata could include like what tier it's at as well as what like what team or whatever uh we could probably implement some really primitive arbac with metadata I like that so if you're not familiar with what arbac is it's ro-based Access Control which means that an agent is going to have uh some some tier so like Supreme oversight board is tier zero the executive group is tier one uh their directors are tier two so on and so forth and so you can say like okay this this set of messages is tier zero messages so that's like only the Supreme oversight board is allowed to see those messages obviously if it's just metadata like that can be compromised but again we're not trying to this is not trying to be Enterprise this is just getting the proof of concept down um so there you I like that let's see let's see if that tracks let me know in the comments either here on YouTube or um or over on the GitHub repo uh then retrieval so the last thing is what files do you give the agent and this the the basically the file retrieval is its internal KB uh system knowledge based system so we need like an Agent Handbook and I realized that this would be critical is that we need to give every single agent in a swarm the same handbook because that's how that's like that's like the employee manual or the user manual so every agent will have the same Baseline understanding as to what it's doing and what it needs and standard operating procedures and morality and ethics and that sort of thing uh some other stuff if it's an agent for building software you're going to need to give it software specifications definition of done that sort of thing um and then any other relevant documentation like uh how to access the API how to write code code examples that sort of thing anything that's gerain to its Mission and the functions that it needs to use and write um and then finally chat functions so these agents are still fundamentally chat Bots there's the user input so that's the input which could be an instruction it could be context it could be something else and then there's output so then the question is where does that user input come from and where does the output go so the user input could come from you know a supervisor agent so like one agent talking to another agent that should be relatively easy to set up um and that might be the most direct way because then you're not you're not shipping um uh chat logs up to an external Source it's just supervisor tells you know another agent go do this um you might also have group chats so as we saw with chat Dev and a few other things where you probably have the you the you know one agent receiving multiple inputs from other agents um so we're going to need to figure out like how to host a chat room basically which that's kind of where I I started thinking that maybe a pine cone or a we8 external uh Vector search search would be good uh who knows let me know what you think and then finally Telemetry so let's say for instance you have an agent that is monitoring a web server or an agent that is interacting with um Azure cloud or something like that it's going to need to be receiving information updates from whatever external machine it's working on um and that could be a function call as well um so we'll need to figure out this this this schema this Paradigm I have no idea how it's going to work ultimately so if you got some some ideas um figuring out the conversation pattern the user input and output with each agent please jump in the discussion and let us know one thing I will say is that um uh comments on YouTube are great um but people on the repo won't necessarily see those so if you've got good ideas please jump over to the discussions on the repo so that everyone can see it and then like I said finally the agent output figuring out where that goes um is going to be something that we need to figure out um how do you route it right like so if you have a supervisor agent how do you know that the output goes to um like which subordinate um or if it goes up to the cloud or whatever so we'll need some we'll need some schemas there so that's what I've done and then the first poll request um so it starts with a um or the first uh instantiation so we've got a basic script this was a member of the ace framework team um got it working so come over and check this out um it's just a really basic agent Builder there will be improvements there will be iterative improvements but uh the idea is that it is getting it's getting started so check that out and then um we've got a subfolder that has the instructions that he figured out that worked really well um as well as the files to send up so you can see this is starting to come together I have a feeling it's not going to take that long to figure out how to get the agent Builder the know the agents that build other agents well um there's there are a few functions that we'll need to figure out like uh IDE ideally we'll have something that writes the instructions with the system like a system function that writes the instructions a system function that writes the mission a system function that writes the archetypes that's what I mean like we need to parameterize the whole thing so we'll get there though because these models are pretty powerful so I think we're I think we're pretty close on that so uh to wrap today's video up the last thing I want to tell you about is the toolmaker idea so I literally just started this but basically if we have something that can instantiate agents one of the things that it needs to be able to instantiate is tools so this is writing the internal tools that it needs um either finding them like you know saving them in a library like making a tool library but honestly like the ability to write code and integrate it and use it based on specifications is going to be critical so basically this is a this is a function calling function writer uh so my idea here is that if you have if you have a function or set of functions or agents that are purpose built for making the tools that the rest of the Swarm needs it's kind of like the worker bees right like it's like oh hey The Hive the Swarm needs you know X Y and Z tools and it goes off to the tool makers they make the tools and send it back and you know they tested it and and that sort of thing that's one of the things that I think we'll need um so agent Builder toolmaker we'll probably need a few other components but again I think once we nail these like you guys will be able to take it and run with it so um yeah I think that's it for the day um let's keep it going as as much as we can and uh yeah let's get some stuff done uh have a good one every