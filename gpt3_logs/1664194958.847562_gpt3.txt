The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: need import pickle i'm just gonna save this as a pickle um we could probably do cpickle for faster i don't care i'm not trying to optimize it i'm just trying to get it to work import numpy as np or whoops numpy as np we're going to do dot product similarity there are better ways of doing this so we're just going to do test.pi just i i have no idea how far i'm gonna get today um make sure that we're recording right yes we are recording eight minutes in okay so uh saving it as a uh saving it to file that's gonna be an option it's not going to be required um let me under meragi init dot pi okay and it's been anyone who watches my youtube channel you know that i'm like phobic of object-oriented coding it's not that i don't like it it's amazing i just got out of the habit of doing it because of rapid prototyping so i need to i need to remind myself what i'm doing that's fine okay so we will come back here do class server we're going to change this instead of class we're going to do vdb one thing i do remember is that when you're declaring a class in python it is best practice to have it the first one uppercase i don't know if it's it might actually be a requirement if it's not it might not work but i don't think you can do like vdb it has to be uppercase v lowercase db okay so class server def in it so we'll just copy a couple of these things um all right we don't need a port this is going to be local only um and then the fields uh let's see field will probably have um oh so actually from this because the the whole point of of maragi microservices architecture for robotics and artificial general intelligence the whole point of that was to was to serve as the like the heart the framework of it um but i realized that it wasn't quite right and so that eventually evolved to the current cognitive architecture that i'm working on um okay so we don't need the port that's fine um and for the fields i don't think we need that as well because we oh stream of consciousness log yeah because this is just going to be so let's just take that out i might need to add it back that's fine um yeah so when we when we declare this well i guess like sqlite it's kind of implicit um yeah all right so we'll we'll just say we'll start with a um with an empty list list and so we'll call this the little this index would not be quite right um we'll just call this data uh that's fine and so basically what you'll do is once you declare your vdb object you'll just do dot like dot data append to add to it and then once you're ready then you'll do like an index or a search on that data i think that's how we're going this is going to be brain dead simple um okay so then let's see validate message result field equals message field return true result filter html head run oh yeah this is the actual server i could have sworn this was like for field in self fields i don't know if this was complete i might not have updated the light the latest code return true result that was validate message it's not actually storing any messages here is it def run oh here we go um what am i trying to remember how to do new okay here we go payload self validate message self sock lock okay it is literally just that okay um so i think it'll be like deaf ad this is probably going to be a super boring video i might not even post it we'll see um yeah so validate message all right so validate a message is when you add a thing okay so we'll do validate our add and that'll be self and then it'll be we'll just say payload so the payload payload is a dict and that's fine um and so then what we'll do i think basically i'll do self dot data dot append payload this feels wrong i'm gonna test this and it's gonna blow up um okay so add and then let's just do like our most basic search function def search self um vector field yeah that should be it um oh and then count okay so this is where the rubber meets the road um okay so results equal list um and actually let me i'll probably just copy paste the functions that i've used elsewhere um did i do that here where did i use let's see we need that um i'm not going to worry about there we go search index okay that's basically this okay so instead of results we'll do scores all right for i in self.data so that's that's our thing um and what we're going to do so basically i want this to be really flexible so i'm not going to assume that the field is going to be in every item right because you might have different field names for different vectors and they might not be present in all of them so i will say let's see we don't need to worry about that so what we'll do is we'll do um try score equals similarity and we'll do we'll do i so i and then we'll do field so you're basically saying search this field this given field and then compare it against a given vector that i want you to search um so that'll be good and then the count is the number of results that you want to turn so i'll just set that to default five um okay so try and then accept continue so basically what i'm going to do is if this field is not present we're just going to skip it and move on otherwise we're going to as do scores append and what we'll do is we'll do um info equals i and then info info score so we're basically going to copy copy this record and we're going to then add this uh the score equals the score that we got um so basically this will be the the same the same exact item that was stored in it and then we'll do scores append so the scores is the result here i'm going to change this to uh results because that's a little bit yeah that makes a little bit more sense results append and then we'll just append info uh so that should give us the results and then what we do is we do ordered equals sorted results and then we do lambda d for d score reverse true so that'll that'll sort it by um top top down or you know descending order and then what we do is um we'll try and and do ordered equals ordered um so we'll start from the zero index and go up

CLEAR ESSAY:

==========

In order to use the pickle module, we first need to import it. We can then save it as a pickle file. We can also import the numpy module to help with dot product similarity.

We will create a class called Server. This class will have a few fields, including a list of data. We can then add to this list of data and perform a search on it.

We can validate messages before adding them to the list. We can also run a search and return the top results.