The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: i'm just gonna merge the um the embedding microservice with the nexus microservice and call it a day and that'll be that so let's do this um just basically copying what works because like if you only have 25 lines of code that probably doesn't need to be a microservice now that being said i might end up eating my hat and um and needing and embedding microservice elsewhere but remember the nexus is going to be responsible for semantic search um so it's going to be the primary producer and consumer of these embeddings which another reason that this is good is i don't want to have the nexus be dependent upon any other service the nexus is the hub so of all the microservices in meragi the nexus needs to be the one that is 100 independent because this is the one that fires up first this is the primary microservice so it's important to get this done uh correctly first um yeah so that's that uh let's see yep so we'll do embeddings payload and then that would be um need to make sure well we'll we'll get this tested and the only place it's really going to be used is going to be here when you do add so embeddings equal embedding payload content so that's going to be the actual message um and i think that's that uh let's see vector equals uh numpy yeah okay so i think i can do embeddings numpy to list i think that'll work okay so then we'll do payload vector equals in bettings.numpy to list it took a while to figure figure this out because i wanted to get it in into a format that was easily renderable and sent via um oh actually you know what i probably don't need to store it as a list anymore i can store it as actually no since i'm saving it as json it needs to be json renderable a numpy array is not json renderable um okay so there's that i think to list is a function or a method so let's call that um is that it was it just like copying over a few lines of code probably um okay so i'll test this in a second but first i'll bring you up to speed with what i've done so add pretty pretty straightforward excuse me i'm a little flimmy anyways so add very simple very straightforward is exactly what it says on the 10. um we'll remove vector because all you need is the content um and we'll assume that you'll also have a microservice and then the nexus is going to be responsible for adding the timestamp and the uuid again no need to no need to add this information from other on other services to to duplicate it right because if you have a hundred different services all doing their own time stamps and uuids why you can do it in one place you can do it right here same with the embedding so we're just consolidating bringing it in into the nexus same as the vector or the embedding yeah and so it'll have the content the microservice the timestamp the uuid and the vector and so if you look at this example oh i deleted it keep it in the editor yes so all that all that's going to be sent from the microservice is this um i am going to add another field so there will be another field it will be um model uh so the model will be used so that because what the micro services are going to do over time is they're going to use their own fine-tuned models and so the model name might be something like you know fine-tuned core objective functions and we'll probably just have a date stamp right so like 2022 0903 you know something like that might be what the model name is and so that way the machine will also be able to keep track of the performance of individual models so the microservice will tell you which service created a message because you'll need to be able to you know each service will need to be able to keep track of its own contribution um there might also be another field that i'll add it might be something like like like context or something so context would be like what is the purpose of this message so you might say like sensory input um something like that typically what i've done is i've copy pasted this into the beginning of the content um but i realized that there that like the if uh the context might also be like a category right or type um so i'll probably add something like that just so that way it's a separate field um yes but um the the nexus microservice is kind of agnostic so what i've done in the past actually is um is in order to test it to make sure that it has all the necessary fields is you do something like um result equals um dict and so then you say uh what you do is so there's a rule of thumb in python where it's better to ask to to try and fail than ask permission upfront which is why i wrap everything and try accept which that's good practice anyways um for for a web server because if it fails you want to send back an error message right and so i just say okay capture everything and if it blows up whatever it does give me a little bit of log output and then send back the error message it's super simple um you know and you can be really mean there is a one of my friends on on his discord he posted like the the the alignment squares so like the chaotic evil one was like you returned just 200 even if it errors that's the chaotic evil uh web server um way to go and i apologize if if uh people are lost on on that okay so but what you can do is you you can rather than test um the the like check like if this if this key is in in this dictionary you just attempt to set it so you say like um payload time equal or result time equals payload time um and if it's not there it'll error out right and so then what you can do is in order to verify that everything that you need um is there and instead and actually since the payload is is here we would probably actually just do result time equals time and then result uuid whoops result uuid um but what you can do then is you switch over and use the result first thing and so then you say result content equals payload content because you want to fail fast right if something's missing you don't want to go through the trouble of doing the embeddings actually the

CLEAR ESSAY:

==========

I'm just going to merge the embedding microservice with the nexus microservice and call it a day. That way, the nexus will be responsible for semantic search, and won't be dependent upon any other service.

The add function is pretty straightforward: we'll remove the vector field, because all you need is the content. The microservice will add a timestamp and uuid, and the nexus will be responsible for adding the embedding.

I'm going to add another field for the model name. This way, the machine will be able to keep track of the performance of individual models. The microservice will tell you which service created a message, and the model name will be something like "fine-tuned core objective functions 2022 0903".

I might also add a field for context, so that it's a separate field. The nexus microservice is kind of agnostic, so what I've done in the past is wrap everything in a try/except. This way, if it fails, you can send back an error message.

In order to test that everything is working correctly, you can set the result time equal to the payload time. If it's not there, it'll error out. Then, you can switch over and use the result. This way, you can verify that everything that you need is there.