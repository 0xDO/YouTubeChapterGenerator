The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: we do the pros on the section and then we stitch it all together we improve the pros and then we have the final product okay so we'll do final blog equals so we'll do that okay so four section in sections so we're gonna just we're gonna take each section and just write the whole thing we might have a final step where we kind of like clean up the whole blog um actually that's not a bad idea let me go ahead and add that note so I don't forget um iterate through the sections and done lies um uh let's see clean up the final product yes okay so four section in sections uh first is hashtag research sorry I need to drink this coffee #research okay um yes so we'll say research equals uh that and then uh let's see how many times did we do this I think we did it like three or four times so we'll do we'll do the same thing that we did here so for I in list range we'll say um uh uh result equals um research topic actually no here we'll call it neural recall because that's a more accurate thing as to what we're doing so the neural recall is yeah so we need to pass the request in the section requests section and there will be some redundancy but that's fine that's why we added the seventh step to clean up the final product to just let's rewrite the whole thing to be one nice consistent blog post [Music] um okay so result equals neural recall deaf neural recall this is like this is the nerdier version of Total Recall uh request extra points if uh I guess they made a remake of that um but the original Total recalled with Arnold Schwarzenegger came out when I was uh much younger I was alive when it came out some of my viewers are older than me many of them are younger so if you raise your hand uh give me a thumbs up or or a comment in the section in the in the comments below if you remember the original Total Recall okay neural recall what is it that we're doing this is basically just another prompt prompt equals open file uh prompt section research dot text and then we do that replace uh yes what were the sections that I had in here request and section right these two see that is where you do yourself a favor if you have variables that are very simple and straightforward and make sense and then Place uh section with Section okay and then we do uh let's see um notes equal gpt3 completion prompt um and then return notes and I know what some of you are thinking you're thinking oh you can just do return this um there's nothing wrong with that but I got out of the habit of doing that because every now and then you'll want to do some little like post-processing like notes equals notes dot replace you know that with that you know depending on uh the kind of format you're looking for um so I just got out of the habit of of returning the function result directly um and and capturing the results in a variable and then passing the variable back it's either or you can do whatever you want um it saves you a line of code um but you know okay a line of code who cares um to me it's not really worth saving okay so then research equals research plus um let's see that's going to have no new line so we'll do plus new line dollar s and then we'll do dollar result um yes okay so the research will be done so research equals research dot strip which that will remove any Superfluous white space from the ends so now we've got the research yes so we'll run the research a couple times we've done the research and then we take the research and write the blog post okay so do first draft not draft five um okay this should be as straightforward as prompt equals prompt section no what am I doing good grief open file prompt sectionpros dot text and do replace research with research so this is there's a couple things happening here so there's prompt chaining which is where you've got prompt prompt prompt prompt prompt so that's prompt chaining but then we're also doing iterative Loops so we're doing recursive Loops inside of the prompt chain um so this is this is pretty Advanced but this is this is just the same process that a human goes through when writing when writing a thing you you brainstorm the structure you gather all the facts then you write the pros and then you iterate on the pros and make it better um now I need to improve on it I wonder if it would be good if we gave it some descriptions like we need to make it more engaging um but whatever okay [Music] prompt open file okay and so then we'll say Pros equals bd3 completion um prompt there you have it all right so that's our first edition of the pros and then we do the same thing here where we attach the research and the pros this should actually probably we'll change this to Pros keep it nice and consistent and I think we did it what like two or three times before it started kind of going off the rails so we'll do we'll do just two improvements of improving the pros um okay so Pros equals um uh improve Pros and so what did I have in here we have the research on the pros research and prose um so we just improve itself so recursive programming for for kitties who don't know you could not do this where you pass a variable where you you assign a variable and pass it at the same time this is a newer thing back in the days of Pascal and C plus plus you have what you would have to do uh you'd have to declare something like prose 2 equals pros and then you'd say Pros equals Pros too is silly but now you don't have to do that anymore now you can just call it directly and it's just a single step um okay so the improved Pros is going to be the same as improve outline with mild difference so we'll do improve pros and instead of request and outline its research and prose so we'll do um improve Pros research oops uppercase and Pros oh whoops I'm going to replace both lowercase and then Pros uppercase and then we don't need that and so then we also change the name back to prose and prose okay so then we call improved Pros we just call it a handful of times and we end up with a better set of

CLEAR ESSAY:

==========

We do the pros on the section and then we stitch it all together. We improve the pros and then we have the final product.

Okay, so we'll do final blog equals. So we'll do that.

Okay, so four section in sections. So we're gonna just we're gonna take each section and just write the whole thing. We might have a final step where we kind of like clean up the whole blog. Um, actually, that's not a bad idea. Let me go ahead and add that note so I don't forget.

Um, iterate through the sections and do the final clean up.

Um, let's see. Clean up the final product. Yes.

Okay, so four section in sections. Uh, first is hashtag research. Sorry, I need to drink this coffee.

#Research okay. Um, yes. So we'll say research equals. Uh, that. And then uh, let's see how many times did we do this. I think we did it like three or four times. So we'll do we'll do the same thing that we did here.

So for I in list range we'll say um, uh, uh, result equals um, research topic. Actually, no. Here we'll call it neural recall because that's a more accurate thing as to what we're doing.

So the neural recall is, yeah. So we need to pass the request in the section requests section. And there will be some redundancy, but that's fine. That's why we added the seventh step to clean up the final product to just let's rewrite the whole thing to be one nice consistent blog post.

Um, okay. So result equals neural recall deaf neural recall. This is like this is the nerdier version of Total Recall. Uh, extra points if uh, I guess they made a remake of that. Um, but the original Total recalled with Arnold Schwarzenegger came out when I was uh, much younger. I was alive when it came out. Some of my viewers are older than me. Many of them are younger. So if you raise your hand uh, give me a thumbs up or or a comment in the section in the in the comments below if you remember the original Total Recall.

Okay, neural recall. What is it that we're doing? This is basically just another prompt. Prompt equals open file. Uh, prompt section research dot text. And then we do that replace. Uh, yes. What were the sections that I had in here? Request and section. Right. These two. See that? This is where you do yourself a favor if you have variables that are very simple and straightforward and make sense. And then place uh, section with section. Okay. And then we do. Uh, let's see. Um, notes equal gpt3 completion prompt. Um, and then return notes.

And I know what some of you are thinking. You're thinking, oh, you can just do return this. Um, there's nothing wrong with that. But I got out of the habit of doing that because every now and then you'll want to do some little like post-processing. Like notes equals notes dot replace. You know, that with that. You know depending on uh, the kind of format you're looking for. Um, so I just got out of the habit of of returning the function result directly. Um, and and capturing the results in a variable and then passing the variable back. It's either or you can do whatever you want. Um, it saves you a line of code. Um, but you know, okay, a line of code who cares. Um, to me, it's not really worth saving.

Okay, so then research equals research plus. Um, let's see. That's going to have no new line. So we'll do plus new line dollar s. And then we'll do dollar result. Um, yes. Okay. So the research will be done. So research equals research dot strip. Which that will remove any superfluous white space from the ends. So now we've got the research. Yes. So we'll run the research a couple times. We've done the research and then we take the research and write the blog post.

Okay, so do first draft not draft five. Um, okay. This should be as straightforward as prompt equals prompt section no what am I doing. Good grief. Open file prompt sectionpros dot text and do replace research with research. So this is there's a couple things happening here. So there's prompt chaining which is where you've got prompt prompt prompt prompt prompt. So that's prompt chaining. But then we're also doing iterative loops. So we're doing recursive loops inside of the prompt chain. Um, so this is this is pretty advanced. But this is this is just the same process that a human goes through when writing when writing a thing. You you brainstorm the structure. You gather all the facts. Then you write the pros. And then you iterate on the pros and make it better.

Um, now I need to improve on it. I wonder if it would be good if we gave it some descriptions like we need to make it more engaging. Um, but whatever. Okay.

Prompt open file. Okay. And so then we'll say Pros equals bd3 completion. Um, prompt. There you have it. All right. So that's our first edition of the pros. And then we do the same thing here where we attach the research and the pros. This should actually probably we'll change this to Pros. Keep it nice and consistent. And I think we did it. What like two or three times before it started kind of going off the rails. So we'll do we'll do just two improvements of improving the pros.

Um, okay. So Pros equals um, uh, improve Pros. And so what did I have in here? We have the research on the pros. Research and prose. Um, so we just improve itself. So recursive programming for for kitties who don't know. You could not do this where you pass a variable where you you assign a variable and pass it at the same time. This is a newer thing. Back in the days of Pascal and C plus plus you have what you would have to do. Uh, you'd have to declare something like prose 2 equals pros. And then you'd say Pros equals Pros too is silly. But now you don't have to do that anymore. Now you can just call it directly. And it's just a single step.

Um, okay. So the improved Pros is going to be the same as improve outline with mild difference. So we'll do improve pros and instead of request and outline its research and prose. So we'll do um, improve Pros research oops uppercase and Pros oh whoops. I'm going to replace both lowercase and then Pros uppercase and then we don't need that. And so then we also change the name back to prose and prose. Okay. So then we call improved Pros we just call it a handful of times and we end up with a better set of