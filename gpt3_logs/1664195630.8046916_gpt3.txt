The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: morning everybody david shapiro here back with a new video sorry it's been about a week um i was out of town at vmware explorer which i can make a video about that if you guys want um for some background virtualization is my day job that's my profession and actually my understanding of systems engineering and large systems plays a huge role in the design of meragi so so that's one update another update is i just received my book um not my book but a book that i bought producing open source software um it's a little bit older some of the reviews said that it's dated um i think it's what 2005 2006 but that it is still good information um obviously it's a 16 year old book and this is before github but i'm still going to do that so that i understand a little bit more of the history of making open source software so that being said um i've started disabling issues actions and discussions on my repositories um because this is still very much in the early experimentation phase um it was probably premature of me to like create a an open invitation for collaboration um so if you could please um a lot of this stuff is not open for discussion yet um it's still very much in the like white boarding kind of experimenting around and one thing that really kind of um is a major distraction is some folks try and jump in and make suggestions um before fully engaging with the material and understanding um what you know like the theory behind it like i've written two books on this um plus i have a whole slew of videos and so um and some people i know that they mean well um but some people are very insistent about you know they want they want to modify the way that things are being done and they haven't done the work to really uh be onboarded which is a big reason that i'm making these videos is so that if someone really wants to they can you know get caught up that's also why i'm writing these books so anyways for the sake of reducing my own distraction level um just think of these videos as onboarding material for you to get caught up if you want i've also thought about disabling comments on the youtube videos just because they're more distracting than anything else um so that might be the direction that i'm going so that it's more of a one-way conversation because i realize that's why i enjoy writing books you know like i send out a book and someone reads it and then like i don't you know like someone can give me feedback if they want but i don't need to hear anything some folks believe that uh that uh debate is the right way to proceed which i disagree i've learned infinitely more by reading books than debating people um so yeah if you feel like debate and um and arguing is the right way to go then please just go away i don't have time for that um okay that being said um did a little bit of housekeeping um all right so working on the nexus so i realized one of the things that i was doing wrong was i was trying to optimize prematurely um i knew i knew someone knows someone i haven't talked to him in a while but he would poke fun at himself because he was a prematurely optimizing um coder um and it's like because you you get you get to a point where you've got something working and you just want to fiddle with what you've got rather than continue building new stuff so let's let's get this let's get the thing working and let's get the whole thing working and then we'll move on um so let's see embedding service so what i'm doing today well first let me get you caught up with what i've done so this is the nexus service and you can see um let me go back here to the nexus all right so that basically what the nexus does is it creates a log a bunch of log files if you're from systems engineering or other places syslog um is is basically what was this was inspired by um and so here's an example where you've got content bacon it's just one word microservice test time stamped uuid and a vector so this is kind of like the bare minimum um kind of uh of of payload that the the uh excuse me that the nexus keeps content uh con uh keeps track of there we go so the content would be obviously this is just one word um but it would be a you know up to a page or so of text it could be a thought it could be a sensation um you know sensor input it could be output decision whatever um and then the originating microservice so this is critical uh later on once we have the the conductor going time also critical because there are two primary ways that human memories work or recall one is temporal and the other is associative which is what the vector is for okay so um and rather than have rather than have the text file just be a uh a text log file um i switched it to json i had it that way before and then um someone i think it was either in the discord or on youtube made the helpful comment of like hey you should just do it all in json i was like yeah you're probably right i'll do it do it do it in json um and you can see that since this has some standard fields it would lend itself to being stored in a relational database but for the sake of just experimentation something that is human readable is good um i will not argue that point yes this will eventually be stored in a database a semantic search database like milvis solar elk stack something it's not going to be stored in json files forever now that being said there's a lot of other stuff that needs to happen once this gets out of mvp phase so this is still mvp keep that in mind it's this is to demonstrate this is a toy level example to demonstrate how it's going to look and feel so what i'm doing today is i'm going to take um i'm going to merge two services and so the reason is because after thinking about it i realized like okay here is the smallest micro service you've ever seen and this is used in exactly one place the embeddings are stored they're only stored in the nexus nothing else stores them so why bother having this as a microservice that everything else can use um so

CLEAR ESSAY:

==========

I recently made the decision to disable issues, actions, and discussions on my repositories in order to reduce distractions and focus on more important tasks. This was probably premature of me, as it invited collaboration before I was ready for it. What I really need right now is onboarding material for people who want to understand what I'm doing, so they can get caught up. I may also disable comments on my YouTube videos for the same reason.

I'm currently working on the nexus, and I realized that I was trying to optimize prematurely. I knew someone who would poke fun at himself for being a "prematurely optimizing coder," and I realized that I was doing the same thing. I was trying to perfect what I had rather than continue building new features. I need to get the whole thing working before I can move on.

Part of what I'm working on today is merging two services. I realized that one of the services I had created was only used in one place, and it didn't make sense to keep it as a microservice that everyone else could use. This is just a toy example to demonstrate how it's going to look and feel. Once it's out of MVP phase, there will be more changes made.