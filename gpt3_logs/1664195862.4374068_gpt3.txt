The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: hello everyone david shapiro here with another video about raven and natural language cognitive architecture or nauka um i took a break for a couple months to write my book the book is now out you can find a link to it in the description below the epub is free um the paperback version is 7.95 i only make about 70 cents on it um yeah so here's where we're at i have created a few versions of raven now and the most recent one is based on open ai's gpt3 engine but i'm using the curie engine which is cheap and fast but it's not that intelligent so if you take a look at this real quick you'll see that raven is kind of um you know there's there's some good information you know i suggest you take the day off and relax that's great um and then i say hey raven i want to uh make a video about you what do you think about that and then uh the output is kind of weird um and then raven gets stuck on that which this is called what i call prompt contamination prompt contamination happens when gpt3 can't quite understand what the point of the prompt is and there's too much superfluous information so this basically means that i'm going to need to take a break until either da vinci is faster and cheaper or gpt-4 comes out so anyways let's see hey raven what is the future of the world if we invent nuclear fusion and i will show you all of the microservices that are running in the background in just a second um yeah see it it's confused so this is this is pretty much expected when you're using curie to try and run a full agi it's not quite there yet if i were to switch to the davinci engine it would be a little bit better and in fact davinci is the engine that i used for all the experimentation um in that in the book all the research code but i wanted to do a version in curie because one it's cheaper it's so much cheaper and so much faster and so it can still give you a proof of concept okay so you can see that raven is thinking it's not completely coherent and that's fine so let's take a quick tour of the actual files in this so here is the repository this code is is publicly available or at least it will be as soon as i publish this video there are a few python scripts and i'll show you each of these in turn i'll probably take a deep dive into the code in a separate video this is just going to be an overview and then uh so there's there's a few of the microservices and then um and then a whole slew of prompts i've got about two dozen prompts um that i'm currently using to run raven uh and then i also record every single interaction with gpt3 so you can see that raven is thinking there's a lot going on behind the scenes it's not just an input a prompt output raven is actually thinking quite a bit but again because i'm using curie uh it you know there's only there's only going to be so much quality that i can get i've kind of run into the boundaries of the technology today okay so uh let me go to actually okay sorry about that um this is the actual diagram the the architecture of what it's doing here um so i'm using discord as the primary interface discord has a great api it is it is a great platform for bots um and then you can also integrate audio later if you need to so this is the set of services that i've got running so first is the discord service discord service handles all of the communication with the discord api it also compiles the contexts so if you read my book or check out check out other videos there's there's what's called the context which is the input for nalco so it creates and handles the context it sends it to the outer loop service um and all of these use the the transformer service which the transformer service uh handles communication with gpt3 so it sends the it sends the chat logs to the outer loop which then uses communication with the shared database and the qa service to compose its corpus and then also to generate the output and again all of these services make use of gpt-3 so that's why gpt3 is in its own service so that everyone can communicate with it separately this also allows you to scale up very easily let's see then there's the qa service qa is is question answering not quality assurance so qa is question answering and in this version i have two primary methods that i'm using qa one is that i use qa to try and answer questions using episodic memories um or i just use the transformer because gpt3 has a lot of knowledge embedded um so basically what i have this this very naive qa service do what it does is it tries to answer questions um just by extracting information from uh from gpg3 and if it says i don't know then it will try and query the database to look for answers as well again this is all very naive this is just a demonstration level this is not an enterprise or commercial grade qa service this will require a lot of work but again the purpose of this particular instance is to show the simplest possible example this is more for learning and communication and demonstration rather than actually something that's going to be taken into production and then finally at the very bottom is the inner loop service which is actually generating most of these logs so there's a tremendous amount of internal thought going on all the time where raven is thinking about thinking about thought basically trying to extract themes of of the episodic memories figure out what to do about it and so on and again we'll get into a deeper dive into each of these functions in a later video right now i wanted to focus on the overview which is the architecture and how it works and also just show that it is indeed working um raven is not sick why would you think that let's see what happens i am not sick yes correct so anyways you can see raven is easily confused raven can't really keep up with stuff let me go ahead and cancel these services um let's see let's see this is the shared database service i have it using just sql lite um sqlite is uh is kind of the bare minimum that you can you can um run

CLEAR ESSAY:

==========

Hello everyone,

I'm David Shapiro, and in this video I'm going to be talking about Raven, my natural language cognitive architecture. I took a break for a couple months to write my book, but the book is now out! You can find a link to it in the description below.

I've created a few versions of Raven, and the most recent one is based on OpenAI's GPT3 engine. However, I'm using the Curie engine, which is cheap and fast but not very intelligent. If you take a look at this real quick, you'll see that Raven is kind of... you know, there's some good information there, but then Raven gets stuck and confused. This is called prompt contamination, and it happens when GPT3 can't quite understand what the point of the prompt is.

So, basically, what this means is that I'm going to need to take a break until either Da Vinci is faster and cheaper or GPT4 comes out.

In the meantime, let me give you a quick tour of the actual files in this project. There are a few Python scripts, and I'll show you each of them in turn. I'll probably do a deep dive into the code in a separate video; this is just going to be an overview.

So, first, there's the Discord service. Discord handles all of the communication with the Discord API, and it also compiles the contexts. If you've read my book or watched my other videos, you know that the context is the input for Nalco.

The Discord service sends the context to the Outer Loop service, which uses the Transformer service to communicate with GPT3. The Transformer service also handles communication with the Shared Database and the QA service.

The QA service is responsible for question answering. In this version, I have two primary methods that I'm using: I use QA to try and answer questions using episodic memories, or I just use the Transformer because GPT3 has a lot of knowledge embedded.

Basically, what I have this very naive QA service do is it tries to answer questions just by extracting information from GPT3. If it says "I don't know," then it will try and query the database to look for answers. Again, this is all very naive; this is just a demonstration level. This is not an enterprise or commercial grade QA service. It will require a lot of work, but again, the purpose of this particular instance is to show the simplest possible example. This is more for learning and communication than actually something that's going to be taken into production.

Finally, at the very bottom is the Inner Loop service, which is actually generating most of these logs. There's a tremendous amount of internal thought going on all the time, where Raven is thinking about thinking about thought, trying to extract themes from episodic memories and figure out what to do about them.

Again, we'll get into a deeper dive into each of these functions in a later video. For now, I just wanted to focus on the overview: the architecture and how it works, and also show that it is indeed working.

 Raven is not sick. Yes, correct. So anyways, you can see Raven is easily confused. Raven can't really keep up with stuff.

Let me go and cancel these services.

This is the Shared Database service. I have it using just SQLite. SQLite is the bare minimum that you can use.

So, basically, what this means is that I'm going to need to take a break until either Da Vinci is faster and cheaper or GPT4 comes out. In the meantime, let me give you a quick tour of the actual files in this project.