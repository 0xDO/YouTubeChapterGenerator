The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: i'll do dmarc equals filename dot replace and what we're replacing is this part with nothing and we're also replacing the dot text at the end with nothing and then we're gonna do upper so that way like it'll end up with like diagnosis all caps and medication all caps and prognosis all caps and tests all caps okay so then the prompt what we'll do what i like to do is actually have um have uh like have the instructions before and after um but let's try it without i think it'll be fine okay so also one advantage of having an all caps demarcator is that it's very distinct like if you look at some of these medical contexts if you see something in all caps it's very obvious oh but this could be a problem yeah because it will have seen this token before so it might mistakenly um say like oh you're done so this is this is the diagnosis let's think about this for a second um so we'll actually do the prompt we'll call will be list all um and i think it'll be important to so this will be like list all diagnosis or list all um list all medication or list all prognosis or list all tests um yeah okay so that will that'll give us a much more unique demarcator and so it'll know to look for the list all as well um because this is this is also where uh where it's helpful to include plain text instructions at the end of fine tuning data especially for multiple multiple tasks okay so list all and then we're going to populate it with the first one is going to be the medical text and the second one will be the d mark and so if you have two dollar s so basically this says put the variable in the string as or put this variable here as a string so if it sees two then you need to have a tuple that's what this is called um okay so that's the prompt as populated and then the completion will be the boolean dot upper because we want it to just do the all caps thing um okay so basically what this if if the answer is no if whatever the question was is no we're done um just append the data and move on if boolean is yes then we need another we need another step and so what we're going to do is we're going to um we need that we need to keep this medical file and the medical text and so what we need to do is that we actually need to get another answer so we'll say okay we actually need to get um so we're going to replace the file name file name equals file name dot replace and we're going to replace the bool with list um and so because what you see is like the diagnosis this is part one and then the list diagnosis is part two so we're just going to assume that this is what it looks like but instead of having all this other junk around it we just want the answer what is the diagnosis sound good okay and then also what we'll do is we will add we'll add a space here so that way there will be actually no i think you're supposed to have a space before so we'll just do space plus so basically what that'll do is it'll add a space between the answer and that last colon um i think that's the the right way to do it you could probably do both um yeah let's do both why not okay so we're replacing the file name so we're gonna grab if the answer is yes if the job isn't done right yes it's like oh there is it is here okay what is the diagnosis okay so then we will want to do the same thing where um prompt equals open file name context so yeah we're this is this will basically be the same where we just put the context back and we ask it again also i want to point out i changed the temperature to zero because we want this to be deterministic we don't want any creativity um just give me the answer yes or no let me add update the prompt file name to find the answer okay so then the completion you get the list answer okay and so then whatever this is should be done now um we'll leave it whatever it comes back with upper lower so then we will do this we'll copy this because it's mostly the same um so but instead we'll say completion equals that plus completion okay i think that's it i think that i think that'll do it um but what we should do is um actually print this as we go um so so that we can actually see it so let's split this out this is this is why so if you you notice in my code i tend to be very procedural this is why because yes you can stack stuff up but then it makes it harder to um to diagnose and print so like print info um and oh actually if it's if it's not found we know that it's no so actually this the completion should just be see and this is also why um completion should be none found um so we want something very specific there okay print info print result that happened okay and so then we'll do the same thing here info equals that we'll print info and then we will um we will brain what are you doing we will append the info sometimes my brain just says what were we doing huh huh i want to do something else i know you're probably thinking that's a sign of adhd um probably whatever okay i think this is good um let's do it a quick test i know you all like to see when things blow up um you like to see uh see my diagnosis my troubleshooting process so let's do this cd what is this called medical python generate well there's your first problem medical texts um oh there's no comma there let's see what line is this line 55. i only drive 55 okay okay did you mean a literal sure oh huh there's a really important step i missed here did you catch it you actually have to save your data um so what we'll do is with all the data there all the stuff is going to be saved actually you know what i have we don't need these these extraneous folders let me open a previous project and i'll just copy the function that i use to format the data because this is kind of an all-in-one with medical.json l as out file for i n result json dump i out file out file write slash n that should be good i think that's the same format yeah because this is prompt completion prompt completion okay so let's close that rapid prototyping man it's a it's it's a special

CLEAR ESSAY:

==========

I'll do dmarc equals filename dot replace and what we're replacing is this part with nothing and we're also replacing the dot text at the end with nothing and then we're gonna do upper so that way like it'll end up with like diagnosis all caps and medication all caps and prognosis all caps and tests all caps.

Okay, so then the prompt. What we'll do is what I like to do is actually have um have uh like have the instructions before and after um but let's try it without. I think it'll be fine.

Okay, so also one advantage of having an all caps demarcator is that it's very distinct. Like if you look at some of these medical contexts if you see something in all caps it's very obvious.

Oh, but this could be a problem. Yeah, because it will have seen this token before so it might mistakenly um say like oh you're done. So this is this is the diagnosis.

Let's think about this for a second. Um, so we'll actually do the prompt. We'll call will be list all um and I think it'll be important to so this will be like list all diagnosis or list all um list all medication or list all prognosis or list all tests um yeah okay so that will that'll give us a much more unique demarcator and so it'll know to look for the list all as well um because this is this is also where uh where it's helpful to include plain text instructions at the end of fine tuning data especially for multiple multiple tasks.

Okay, so list all and then we're going to populate it with the first one is going to be the medical text and the second one will be the d mark and so if you have two dollar s so basically this says put the variable in the string as or put this variable here as a string so if it sees two then you need to have a tuple that's what this is called um okay so that's the prompt as populated and then the completion will be the boolean dot upper because we want it to just do the all caps thing um okay so basically what this if if the answer is no if whatever the question was is no we're done um just append the data and move on if boolean is yes then we need another we need another step and so what we're going to do is we're going to um we need that we need to keep this medical file and the medical text and so what we need to do is that we actually need to get another answer so we'll say okay we actually need to get um so we're going to replace the file name file name equals file name dot replace and we're going to replace the bool with list um and so because what you see is like the diagnosis this is part one and then the list diagnosis is part two so we're just going to assume that this is what it looks like but instead of having all this other junk around it we just want the answer what is the diagnosis sound good okay and then also what we'll do is we will add we'll add a space here so that way there will be actually no i think you're supposed to have a space before so we'll just do space plus so basically what that'll do is it'll add a space between the answer and that last colon um I think that's the the right way to do it you could probably do both um yeah let's do both why not okay so we're replacing the file name so we're gonna grab if the answer is yes if the job isn't done right yes it's like oh there is it is here okay what is the diagnosis okay so then we will want to do the same thing where um prompt equals open file name context so yeah we're this is this will basically be the same where we just put the context back and we ask it again also I want to point out I changed the temperature to zero because we want this to be deterministic we don't want any creativity um just give me the answer yes or no let me add update the prompt file name to find the answer okay so then the completion you get the list answer okay and so then whatever this is should be done now um we'll leave it whatever it comes back with upper lower so then we will do this we'll copy this because it's mostly the same um so but instead we'll say completion equals that plus completion okay I think that's it I think that I think that'll do it um but what we should do is um actually print this as we go um so so that we can actually see it so let's split this out this is this is why so if you you notice in my code I tend to be very procedural this is why because yes you can stack stuff up but then it makes it harder to um to diagnose and print so like print info um and oh actually if it's if it's not found we know that it's no so actually this the completion should just be see and this is also why um completion should be none found um so we want something very specific there okay print info print result that happened okay and so then we'll do the same thing here info equals that we'll print info and then we will um we will brain what are you doing we will append the info sometimes my brain just says what were we doing huh huh I want to do something else I know you're probably thinking that's a sign of adhd um probably whatever okay I think this is good um let's do it a quick test I know you all like to see when things blow up um you like to see uh see my diagnosis my troubleshooting process so let's do this cd what is this called medical python generate well there's your first problem medical texts um oh there's no comma there let's see what line is this line 55. I only drive 55 okay okay did you mean a literal sure oh huh there's a really important step I missed here did you catch it you actually have to save your data um so what we'll do is with all the data there all the stuff is going to be saved actually you know what I have we don't need these these extraneous folders let me open a previous project and I'll just copy the function that i use to format the data because this is kind of an all-in-one with medical.json l as out file for i n result json dump i out file out file write slash n that should be good I think that's the same format yeah because this is prompt completion prompt completion okay so let's close that rapid prototyping man it's a it's it's a special