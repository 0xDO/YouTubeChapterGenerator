The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: fine-tuned model um how to how to how to actually create it um actually maybe I'll end this video on creating it and then part three will be using a fine-tuned model that sounds that sounds right but first let me show you what this looks like um so let's just copy the first one and we'll do language actually no we won't do I'll I'll clean this up because basically what I'm going to do is I'm going to reconstruct what it what it actually looks like so we'll take out um the beginning and then we'll replace these the backslash n because that is going to be um uh the the the new line character um so let's just replace those and then we'll take out this middle bit and then we'll do this okay so basically this is what it looks like so this will be the input part and so this is a is a natural language um token it's a demarcator that tells the model okay now write me an outline um when you've got when you've got semi-structured or listed data like this you often don't even need to have a natural language tag like this but it helps so basically what you're training the model is so that every time it sees this come out every time it sees this token it says Ah now it's my turn so this is the input and then here's the here's the output so that's that's essentially what it looks like now how do we get this up into um into uh open AI to actually use it how do we how do we run the fine tune job I'm glad you asked I wrote another script called fine tune dot Pi um this one it uh it's got a few canned functions that I use repeatedly um but you just scroll down here to the end um you uncomment these first two so this uploads your file and we need to rename this to plots.json L because that's what we're uploading so what it does is it uploads the file to your um to your openai account gets the response which includes the the file ID and then it does the fine tune model so it runs runs the command and if you just look up here fine tune model file ID suffix model so on and so forth it's pretty straightforward and then you've got a label here a tag so we're going to just call this um plot generator um so then what I'll do is I'll run this so I'll do oh gotta save it so then we'll do python fine tune and it'll it'll go and you see it spit out a whole bunch of stuff this is the primary thing we're looking for right here so my fine tune job is pending so I'm going to go ahead and stop the video here after doing a quick recap and then in the third video I will show you how to actually use your fine-tuned model do a quick time check we're at 10 minutes so just quick recap we generated a whole lot of of uh synthetic data with synthesized plots and then what we did was we generated more than we needed right so uh what it what I ultimately did was I deleted all the completions that were too short because I don't want something that's just going to spit out like you know a Netflix like movie description summary no I want an actual plot right and you look at some of these longer ones like that is a plot that is an outline um so I deleted all the ones that I don't want so that I'll get more consistent um more consistent output and that is the easiest way to do data augmentation for fine tuning especially if you're using synthetic data you just you get you get more samples than you need you delete the bad ones and then you just go with with what you got um it's the Lazy Man's fine tuning um so that's that's step one then we did the fine tuning data which is real simple it's just a matter of smooshing it together from two different sources so I've got identical file names in the completions and the prompts and so then those are matched up in a file uh called plots.json L which is here and so you can see this is the actual this is the Beating Heart of a fine-tuned model for gpt3 and then finally there's just this quick script that will actually start your fine tuning job so there you have it that is part two of my fine tuning uh tutorial series thanks for watching like And subscribe and then we will see you for part three on using your fine-tuned model thanks for watching have a good one

CLEAR ESSAY:

==========

In Part 2 of my Fine Tuning Tutorial series, I'll show you how to take the synthetic data we generated in Part 1 and use it to fine tune a GPT-3 model.

First, we'll need to clean up the data a bit. I'll remove all the completions that are too short, as we only want plots that are reasonably well-formed.

Next, we'll upload the cleaned-up data to OpenAI. I've written a script that will do this for us, called fine tune.py. This script will also run the fine tuning job for us.

Once the job is complete, we'll have a fine-tuned model that we can use to generate new plots. In Part 3, I'll show you how to use this model. Thanks for watching!