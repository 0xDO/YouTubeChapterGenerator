The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: morning everybody david shapiro here um today we are going to go over microservices so i posted a question on my youtube channel um asking if people wanted to learn about microservices because i realized this is something i've been going on about lately and uh everyone has been here for gpt3 and uh you might not know what a micro service is so without further ado here we go what the is microservice i don't care about getting demonetized and why is dave obsessed with them the short version of a microservice is that you it's when you break software into independent chunks so the old school way of building software was that you'd have a monolithic application where all the software is put together in the same executable file or in the same server and so on and this works up to a certain point but as you can imagine once you get bigger it's really difficult to run and so then what you do is you break all the parts of that software down into smaller chunks and then you have them communicate with each other like independent units or teams so monolithic versus microservices there is a few steps in between but this is where we started and this is where we're at uh okay but why the primary reason is that microservices are easier to build and maintain it's a simpler architecture so rather than have one big thing that has all these internal parts that have to communicate and be fine-tuned and if one part breaks it can make something over here break by decoupling all that it is a simpler architecture it's more like a web and also if one component is faulting you can take that component out fix it look at the communication that it has with other components and you can see exactly where in the network you have problems another principle of microservices architecture is that it's loosely coupled meaning that if this service blows up because its database blows up the whole the rest of the application might be okay another key advantage of microservices is that you know you as one human cannot understand the entirety of a huge platform like amazon you can however understand one microservice or actually several microservices generally speaking a scrum team will be responsible for three to seven microservices and so you have these smaller components that one human or one team is able to fully understand and master whereas you cannot have that in a super huge monolithic thing another thing is that it is much more dynamic and flexible and can evolve over time which in today's world where you know amazon and and netflix and facebook and whoever else are always adding new services and features that flexibility is critical when you adopt a microservices architecture okay a little bit of background who when where um so microservices architecture was pioneered by amazon in a big way they didn't invent it but um once the amazon platform got too big circa 2005 i think they started breaking it down into into smaller components so really it was a matter of necessity they said this is unmanageable we need we need something more more modular now everyone uses it um pretty much if you're doing software development today it's going to be in microservices um like there are there are stuff there's stuff on on aws and azure and stuff that allows you to just run code and containers and stuff and so it's all everything is containerized every you even even have serverless code where you just send a piece of code to the cloud it executes the code and sends back the result so you don't even need a container like so we're getting even more distributed it's like nano services microservices really took off around 2010 that's when aws services really started becoming popular although again they were available before that some of the key benefits uh you can have you can use any language so say for instance you have one team that's writing a microservice in in c because it has to be fast and efficient and cut down so for instance a machine learning microservice might be written in c whereas you might have a web front end that's written in like react or uh something else right um what is it uh my brain isn't giving that's i haven't done any web i'm not a web developer and it's been a long time since i've worked with web developers anyways point being you can have different microservices that have different functions and you can use whatever language or technology stack is ideal for that particular function but then they communicate with a standard standardized communication thing such as excuse me a rest api or an amqp message broker you don't need to know what those are specifically just know that those are two primary ways that um different computer or software components can talk to each other so rather than everything being encapsulated it says hey i'm going to talk to you what's your phone number uh basically um it allows for continuous delivery so amazon never goes down right you might lose one one or two functions but it's always adding stuff and it's just bolting on new parts and so that that idea of bolting on new parts as you go which you can't do with your car by the way it takes a lot of work but that is how continuous delivery works it's modular it's scalable distributed development that's what i was talking about in the last slide um one principle that i've adopted and this comes from unix world which is every tool should do one thing and do it well so rather than have a big giant platform that you know is like okay and and this part's okay and this part's okay when with a micro service that what you should do is focus on doing that one task and do it perfectly um okay so you know what now you know what a micro service is in in general so let's talk about artificial cognition and microservices here is a basic diagram of the brain sorry it's not in english i wanted to make sure that i stuck with creative commons licensed images and this was the best one because it was that i could find because it was simple and color coded

CLEAR ESSAY:

==========

Microservices are a way of breaking software into independent chunks. The old school way of building software was to have a monolithic application where all the software was put together in the same executable file or in the same server. However, as applications got bigger, it became difficult to manage them. Breaking the software into smaller chunks makes it easier to build and maintain.

The primary reason for using microservices is that they are easier to build and maintain. They are also more flexible and can evolve over time. Microservices were pioneered by amazon in a big way. Once the amazon platform got too big, they started breaking it down into smaller components.

Some of the key benefits of microservices include being able to use any language, being able to have continuous delivery, and being more scalable.