The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: i'll do i'll do um i'll add count back in count equals five um and then we'll just do that so that way if you reuse this code you can just pass however much you want um because imagine that this conversation gets much longer and you wanna return like 50 right because you can easily fit that into actually yeah let's let's do a little bit longer let's do let's do 10. um so we'll get the 10 most relevant lines and then okay so the whole conversation is going to be accumulated here the old lines will be there um and then we'll just pass in 10. um let's cut off um let's see latest conversation equals uh let's see actually no here if len conversation [Music] no um recent conversation equals uh here do if there we go if len conversation is greater than 30 so we'll we'll say recent conversation equals um equals conversation and i believe the thing is negative 30 that let me make sure i'm doing that right python l equals list range 0 to 100 l okay and then l if we do negative 30 colon that's just the last 30. okay perfect um and then do laying just to make sure that that's right yes okay um yeah so what this does is if our conversation is getting too long we don't want to pass the entire conversation right we just the last 30 lines that's more than enough because you look at this this is 1 2 3 4 5 6 7 8 9 10 11 12 13 14. so this is 14 so this is less than half of that and obviously this is enough context to know what we're talking about so 14 lines of conversation is plenty 30 will be way more than enough that is a pretty long conversation and then on top of that we're going to have the 10 oldest lines right or the 10 most relevant older lines um okay so now what we've got we're searching our index we're searching the conversation we're getting the most recent conversation so this is 40 lines so now what what are we missing we're missing external data okay so um convo block equals so we'll do um n so this is newline dot join and then we'll do old lines so this is going to just be the old old bits of the conversation plus um i probably need to do a new line between there and then plus and we'll do the same thing and we'll join recent conversation so basically what this will do is it'll combine it into one chat block right so it's like okay we've got this um so now what we've got our convo block what we need to do now is we need to do a prompt um so prompt and just copy a line so prompt equals open file and we'll just do prompt um keyword replace block with convo block okay so now we need to do some prompt engineering so basically what we're going to do is we're going to i'll use this as an example so we're going to say read the following conversation and generate um actually and let's see recommend a single relevant wikipedia article title okay so then we'll do um most relevant wikipedia article title so let's see if this works um i want to keep this up so i'm just going to duplicate this tab and we'll go to davinci instruct okay let's see what it says romulus augustus cool and then let's go to wikipedia wikipedia why is my uh i've already had coffee romulus augustus bam got it okay um so what we can do then is uh we'll we'll query this we'll get it from wikipedia um so this worked really well it's always nice when when your intuition is like spot on um okay so we've got our prompt uh let's go ahead and just do block and we'll call this prompt what did i call it keyword actually let's call this wikipedia because that's it's very specific it's specifically let's write a prompt to get wikipedia prompt wikipedia so this presupposes that that gpt3 will know the correct wikipedia article gpt3 was trained in part on wikipedia so i don't see any problem there's another way you can do this so let me show you this is if you want something that's more open source or more open-ended what you can do is actually you could feed this into a um into a question generator um so let's see where was it my nowka question generator wow is it really that old um questions yeah so i have a question generator which basically what it does do i have an example yeah so i have an example where you um you feed it anything and it'll generate a list of questions so natural language questions are going to be much more open-ended in terms of what questions should i ask about this you could do that but gpt3 is also just really great at like [Music] let's see read the following conversation and um recommend let's see uh a list of google search queries to learn more okay so and then we'll say like list of google search queries um so you do dis and it like so let's say you want to query google instead of wikipedia um you could do this and then just do google searches i'll go ahead and save this prompt just so that way you all can see it so um we'll do uh do block and then we'll remove that and save this as prompt google okay so now you guys can see um you can experiment with this if you want to use the google api instead of wikipedia um either way both serve as an external source um it's pretty trivial as you see like you just ask gbd3 to generate a list of google queries and you're done okay um answer gp oh wait no no no no no um oh right yeah so then we say um title equals gpt 3 completion prompt i think that's all i need to pass that's a chat completion gpt3 completion yes we do not need that many tokens let's say like i'll say 500 because we'll use we might use this for other things now let's say 200 nice and short [Music] max tokens for the chat let's say 100 we don't want super long conversations temperature of 0.7 that's fine frequency penalty let's take that out um that should be fine okay uh yeah so we've got our conversation set um we've got a title and then let's take a look at the wikipedia pi pi so if you want to get the article you just say here's our page so i'm going to assume that it works actually no we'll say um wiki equals let's do let's let's not make any bad assumptions let's do fetch wiki um and we'll do title

CLEAR ESSAY:

==========

In this essay, I will be discussing how to generate a list of Google search queries using the GPT-3 completion API.

First, I will create a file called 'prompt.wikipedia'. This file will contain the following prompt:

"Read the following conversation and generate a list of relevant Wikipedia articles."

Next, I will need to create a file called 'convoblock.py'. This file will take the input from the user and generate a list of Wikipedia articles.

The first step is to create a list of all the articles that the user has read. To do this, I will use the 'wikipedia' module.

Next, I will use the 'gpt-3' module to generate a list of relevant Wikipedia articles.

Finally, I will print the list of relevant Wikipedia articles.