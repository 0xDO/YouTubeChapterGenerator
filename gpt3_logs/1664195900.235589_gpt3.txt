The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: look at like the original um universal sentence encoder um they did like uh i think like 124 and 256 and 512 vectors or uh dimensions um the newest newer ones are probably bigger than that all these links will be in the description if you need them all right if name equals main so what are we going to do what do we want to do with this well first let's just do a really simple dot product of um of like uh where did it go these so let's let's say like okay what's the difference between like the emperor of the known universe if he was dwayne johnson versus if it was just you know the normal super masculine one um so we'll go here and we'll say um we'll say we'll say v1 for vector 1 equals 1.0 1.0 v2 equals uh one dot uh oh and then 0.5 so then let's do print similarity so then this will be emperor dwayne and then this will just be whoops patasha emperor um so then we'll return similarity of v1 v2 all right so let's run this real quick cd python gpd3 tutorial python embedding all right so the the dot product is 1.5 so that's that is um that is the level of similarity now what happens if we do a third one we'll do the um we'll do the androgynous so we'll do negative 1.0 for social power and then 0.0 for um for so this is like the gender neutral prisoner all right so then we'll duplicate this and we'll swap out um [Music] v2 for v3 so we'll get two outputs in this one so i'll just do hashtag or pound sign 1.5 so that's the score that returned oops i need to save it there we go okay so then you see like oh wait hold on now this is way different so this one is negative 1.0 um okay so now you're starting to get the idea of what it means to compare these now when you have you know a thousand or twelve thousand dimensions these numbers get much more um much more nuanced okay so how do we how do we use this right how do we um how do we use this to do search or comparison or clustering so i had this idea so we're going to do categories equals and we'll do plant reptile mammal fish so we're just gonna do we're gonna do four categories and okay so then what what do we do with that um we'll do a while loop well true and we'll do a equals input um enter a life form here oops so for python you're supposed like the the default is that you use single quotes um and i can't remember off the top of my head right now when you're supposed to switch between single quotes and double quotes um but like powershell for instance the default is you're supposed to use double quotes um okay so we we we get a we get a life form and then what do we do with that um so then we'll do uh vector equals um gpd3 embedding of our input so we'll get an embedding back and um so just so they can see what this looks like let's just do a quick um print out of this so we saved it um cls python embedding enter a life form here uh we'll do bald eagle because this is america and it spits out a huge number you see how big this number is well it's actually a list of numbers but you get the idea um so this is the ada version semantic embedding of bald eagle it is 1024 floating point numbers between negative 0.1 or negative 1.0 and 1.0 we can do this with davinci and it'll be even longer um why did this get messed up oh there we go so um so there you have it that's what that's what an embedding looks like so it just it shoots it back real quick all right but what are we going to do with this so what we want to do is we want to find we want to classify what did i put in and we want to match it to one of these categories so how do we do that well the first thing we can do is and this will be really inefficient because what i'm going to do is i'm going to get a vector for these each time but really what we should do in the long run in a longer video or in a future video we'll store these we'll store the embeddings for each of these okay so let's do a function so we'll match let's see result equals match class and so what we'll do is we'll pass our initial vector and our categories and so this is the vector so we're going to get the vector for whatever life form we put in was and then we're going to pass these categories so then we'll do def uh match class and then we'll do um vector and our categories and i know in a previous video i said that it's best practices not to reuse the same variable names but since i'm not modifying these i'm just reading them it's not that big a deal but it's still poor practice so just keep that in mind i don't always follow the rules um okay so match class so the first thing that we need to do is um is for each of these categories um so we'll do classes equals list and then for um c in categories we'll do um we'll just copy this real quick vector equals gpt3 embedding but instead of a we'll do c so that's this so that well this is a for loop which means that we're going to iterate through each of these items and we're going to say okay what is my vector and actually you know what if i got to write this i might as well put this down below um so we declare our categories so we'll do for c in categories um and we'll do this here so let's run this once so this is another rule of thumb if you're going to run a piece of code more than once you put it in a place that one it'll only run once if you only need to but also if you need to call it multiple times then you then you declare it as a function so let's just clean this up here first we'll do it a little bit better all right so we get the vector for the category and so then what do we do well we want to save it in this new variable called classes and so we'll say info equals and we'll say we'll we'll declare this as a dictionary so this is this is an explicit uh definition so info equals dict and then we'll say info um actually that's not the way that i prefer to declare these so you can implicitly declare with the curly brackets so that says this is a dictionary and so we'll say the dictionary so we'll say category equals c and then we'll say vector equals vector and

CLEAR ESSAY:

==========

In this video, we explore how to use the Universal Sentence Encoder to compare vectors of different lengths. We start with a simple example, comparing the vectors for "emperor of the known universe" and "patasha emperor." We then add a third vector, for a gender-neutral prisoner, and compare the results.

We then create a function to compare vectors of different lengths, by iterating through each category and calculating the similarity. We test this function by inputting the vector for "bald eagle" and compare it to the vectors for "plant," "reptile," "mammal," and "fish."