The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: um let's see boards data science fice yeah here we go so this woman wrote a really great write-up of feis turns out feist doesn't do what i need it to do um but we can do a couple of good things so let's see np random seed um we want vectors as type float32 and all right so we're doing how many dimensions so there's going to be 200 by here let me zoom in so you can see what i'm looking at all right so this is this is using numpy to um to generate some some random numbers uh and we'll just do this as like a way to to to test this okay so i'll just copy this because it's useful borrow code all right but i don't have a function that can they can do them as as one so we will do i don't know off the top of my head how to split up um how to split these up as as individuals so we'll do n one and then let's just print db vectors and the dimension will say 12. all right let's see if that works i might be completely losing my mind um cd vdb light python test okay that worked okay so we've got a couple of vectors um dimension as type uh can i just do the zeroth one does that work okay cool so then let's go ahead and do and let's do 200 because then i think okay cool and if we print out all of them so you can you can create this as a list of lists okay that's fine that's fine all right so then what we'll do is four uh vector and db vectors we will do info equals we'll say vector equals vector because i'm not creative like that and then i want like some random oh no we'll do from time import time and then from uuid import uid for bingo okay so then we'll do uh time equals time and so that'll be stored as a floating point number um you can also store these as a decimal i can't remember there's there's a way to there's a way to store um numbers in python as like literals uh literal numbers not floating point uh as decimals um it's not that important and then we'll say uoid equals string uid4 and that will be what we're going to register to the vector okay so then we'll say vdb dot add info yeah that should work let's run this and see if it blows up and if this works i'm gonna like save this video and just be like we're done for now because uh quit while you're ahead okay um let's add a function so def uh details and so then we'll just do like uh print um [Music] db uh db elements number and then we'll say len db uh no self.data and then what else there would um oh there's a way to uh show like size and memory um python show size in memory of list import cis size get cis get size of okay sure let's do it um import cis and then we'll say um print db size in memory and we'll do uh what was it cis get size of is that right yeah list one size of get the size list using oh interesting but why are they different sizes okay we'll do cis because i think i think the system reporting the size of it is probably going to be more accurate okay and instead of list one we'll do self.data um sure and then at the end of that we'll do vdb.details and let's see cls it's working it's really working okay so that i think is in bytes yes so that returns bytes um so let's uh let's add a thing in here so that it's clear what we're talking about and we'll do just bytes bytes there we go i can spell um okay and then the last thing we want to do is just search let's do a search um so we got the details here let's comment out um we'll just do the first one and then let's do uh let's do um results equals vdb dot search and let's see how did i define the search so we we give it a vector so let's do db vectors and this is this is going to be like an exact match right but let's find so let's do let's do the 10th vector and then the field name is is just vector here let's actually make that implicit so field will just equal vector unless otherwise specified and so then also the count we'll we'll leave that implicit as five um just because you know you never know you might have you might have just one okay and so then let's get um from p print import pprint as pp and then we'll do pp results let's see what happens it returned nothing it was too good to be true let's see how long this video is now um we're only 35 minutes let's see if we can figure out what's going on here um all right i suspect so here's here's why you don't want to do a try except is because it will often exception as oops so we'll do print oops um because you'll often end up with uh something that you don't want um so let's see where all did i use try pretty much just in the search loop and then here i haven't tested the delete functionality yet okay so let's see name similarity is not defined what do you mean it's not defined oh right because i copied another thing and i had a function named similarity but we can just do it we can replace that with np dot dot i don't know why i have this as a separate function i thought it was going to be more complex than that okay that's fine all right so where is similarity there it is okay np dot so now we should be able to well here let's leave that there just in case it blows up cls python oh hey look we have similar things vector array oh interesting okay so it's stored it as a nunpi array in memory i wonder if that's more efficient than storing it as a list who cares but you see it's sorted so this whole thing worked it worked cool i'm gonna save this on on pi pi and you'll be able to use it um and actually you know what because this works i'm going to go ahead and get this registered on pi p i and then show you how to how to use it yourself so give me just a smidgen of time okay it's up on pi pi look at this yi i did good okay uh let's make it let's give it a test make sure it works so we will do um pip install vdb light all right and now let's make sure that this little script that i wrote works this is the public test version so we'll do python uh no we'll do pub test.i and then we'll just jump in here and do python hub test np is not defined did you mean pp well darn it um from uh import numpy as np now that should have

CLEAR ESSAY:

==========

In this video, David Shapiro demonstrates how to use the vdb light package to generate random numbers. He starts by importing the necessary packages: numpy and uuid. He then defines a function to generate a list of random numbers, using numpy's np.random.seed function.

Next, he creates a list of vectors, each with 12 dimensions. He then loops through the list of vectors, adding a unique identifier (uuid) and a timestamp to each one. Finally, he searches the list for a specific vector, and prints the results.

This video is a great demonstration of how to use the vdb light package. It's easy to follow, and provides a clear explanation of each step.