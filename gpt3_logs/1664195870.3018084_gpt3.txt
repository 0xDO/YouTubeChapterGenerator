The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: compiling these i know this is this does not this is not a good look um again this is this is a demonstration level version um and it needs a lot of help um i also need to to revisit the qa system um i had much better look uh luck on the qa system when it was based on solar um so let me go ahead and advance to that the qa service whoops let's see actually this video is getting a little bit long um well the qa service i pretty much told you what it does already basically it tries to answer from memory or it tries to answer um it tries to give a factual answer from gpt3 and basically in order to answer from memory it will it will pull the database for for a list of keywords it'll generate a list of keywords and and then search the the database for relevant memories and then go through and try and answer based on that this actually works pretty well when it doesn't generate an error i'll have to go and investigate that some but again i showed you in real time that it was able to integrate information so that's the qa service again less than 100 lines of code pretty simple pretty straightforward and then the shared database so the shared database can run on sqlite it can run on solar it can run on postgray whatever you want to do or postgres i don't know i've heard people call it either but basically this runs on sqlite and it presents um a rest api interface uh that allows it to do i give it a few functions one is you can just um uh select something so this will this will return a list um of of information um i've got it you know where where type is like one type order by and then limit um so that will give you this allows you to select lists of things and then increment so oh increment is a critical function because as demonstrated in or as i wrote about in the book you need the ability to update memories so every time you update a memory or every time you access a memory you need to update its last access time and its access count so that's where you see here i increment the axis count and i also set the last access time and basically this allows raven to keep track of how often memories are accessed there's a few reasons that you want to do that i'll go into a deeper dive in in future videos again because this one is getting to be a little bit long here's the transformer service uh i think this is the last one or actually no i need to do the inner loop transformer service it's super simple all it does is handle uh communication with openai i've got a few defaults set and a future version i'm going to make this a little bit more flexible so that we're not just reliant on curie with some of these some of these default settings again super simple micro service but by making this a micro service it allows you to switch to other transformers if you want to say you want to use a version of bert or gptj or whatever else you can you can you can replace your transformer microservice with any other transformer so let's say you want to switch from gpt3 to gpt2 you want to switch to gpt4 when it comes out you want to switch to another vendor you can do that by having it all distributed in this manner again super simple this one's less than 60 lines of code and then finally the inner loop the inner loop is is actually the largest and and most difficult um uh service because this is basically like raven thinking right this is raven thinking about thoughts it is very similar to the corpus in terms of how it is composed however i added this concept called chronology i found that it works better if you actually lay out thoughts in in sequence and so the chronology basically just says okay here's all the relevant memories to this current memory let's lay them out in chronological sequence and then see if we can draw any conclusions from it the reason from that is because if raven is thinking about an older thought raven might also have more recent memories um in order to see like cause and effect um so let's say you know you go to school or go to work you know a year ago something happened and then you get a follow-up event um and then you think about that you lay it all out in sequence and you say oh this is what happened right and this is all automatic in human brains right you you automatically your brain automatically gives you your whenever you remember something it kind of has a little bit of metadata attached to it um you kind of remember how long ago something was was it yesterday was it a week ago was it a year ago and of course human memories um are not are not that explicit like you might have trouble remembering was it four days ago or three days ago but you remember relatively how recently something was okay so this video is almost 20 minutes long i'll go ahead and stop it here this was just a broad overview plus a demonstration of raven and naoka or natural language architecture cognitive architecture i apologize thanks for watching and stay tuned for future videos have a good one

CLEAR ESSAY:

==========

In this video, I give an overview of the raven natural language architecture cognitive architecture, including a demonstration of how it works. I also explain how the various microservices that make up raven work together.

The QA service tries to answer questions from memory, using information stored in a shared database. The shared database can be used by other services, such as the transformer service, which handles communication with openai. The inner loop is the largest and most difficult service, as it is responsible for raven thinking about thoughts. It uses a concept called chronology, which lays out thoughts in chronological sequence, in order to see cause and effect.

This video is almost 20 minutes long, but it provides a broad overview of raven and how it works. Thanks for watching and stay tuned for future videos!