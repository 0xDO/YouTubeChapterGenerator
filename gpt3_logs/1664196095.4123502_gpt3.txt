The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: can find the context around that memory so those are the two primary functions and then there's a save endpoint which um i'll actually probably automate this so that it will save automatically but right now i have it so that you you call save manually which is similar to how solar works um you tell solar to save but i think solar also has an option to automatically save after a certain number of records this will need to ultimately this will probably be shunted off to some back end function since what i'm doing now is i added a little thing where it saves log files out so then the log files can be processed in the background so that the nexus stays fast again we'll get to optimization later um okay so that is the nexus microservice and then we did the embedding microservice so those are the two um basic functions those are just kind of like the underlying underpinning technologies now the first microservice that actually uses natural language is the simulation service which used to be called the sensor sim service so if you saw my previous video that's what it was called same thing now it's just called the simulation service and what this does is it creates a list of scenes um that are then used by um that are then piped into the nexus so that it has some interaction with an outside world um this this service it's very simple it's pretty straightforward it has just a few steps so the first thing that it does is right now i have it always start with the same new scene and then what i'll do in the future is i'll use this to test other scenarios so for instance you know we want we want an agi or an artificial cognitive entity that you know can handle any number of situations right if it's a medical emergency if it's a global catastrophe if it's a if it's a political upheaval if it's a war if it's a machine uprising right if if if there's two machines that are fighting for dominance we want to be able to test to make sure that this paradigm will not um become harmful right some of the some of the success criteria are here is that um uh my work you know raven has to be um robust meaning that it is stable over time it won't modify its behavior but it also has to remain benevolent under all circumstances and so this is where the simulation service comes in because obviously like if i get raven working i can't just like unleash raven on you know the internet um it needs to be tested in in isolation and so this will allow me to test different scenarios let them run because you see uh you saw in a second ago with um the simulation service all this all the scenes right so it'll just play out scene after scene after scene and they're they're all logically one follows the next based on events and actions and feedback so you get this recursive um feedback loop of scene action event new scene you know the scene is modified it actually works pretty well you could also adapt this technology for if you wanted to say do a video game a text based video game it's really similar to how ai dungeon works actually um so uh let's see generate event um incorporate actions from the nexus new scene save scene summarize the backstory up to this point because you need to keep track of everything that has happened so far otherwise you kind of get lost yes so this is the simulation service and then finally bringing you up to speed today with the uh imperative service so the imperative service is it's almost identical at least of some of the background stuff excuse me um a lot of the functions are identical to the simulation service but then when you actually look at what we do so we take all the input from the nexus so we say okay what's going on what are our thoughts what are the actions what's the simulation that's going on what are the memories that are relevant memories to what we're seeing um so we take that and then we say let's reduce suffering let's increase let me zoom in a little bit sorry let's reduce suffering let's increase prosperity let's increase understanding and then let's also ask questions so now that you're up to speed with what we're working on let me actually show you how these how this works so in this instance we have um brainstorm a list of questions to ask about the following scenario so in this case we're just saying like okay this is one of the this is this was an output from the simulation scenario i did not write this so the story started let me show you the story started here where it says um um two men are sitting at a stone chest table in central park they're playing chess it's a beautiful summer day children are running and playing horns are honking and the bustle of new york can be heard in the background that's where it started and then where it ended up was the two men continued to play chess in the dark so a lot of stuff happened but basically they were so focused on their chess game and they're playing and then they start um trash talking each other so two men continue playing chess in the dark their their eyes straining in the low light the trash talk gets more heated as the game gonna go on and neither of them notices the empty park around them or the fact that they're the only ones left suddenly they're startled by a loud noise they look to see a group of teenagers who are laughing and shouting as they run away the men realize that they've been playing chess in the dark for hours they pick up their things and head home this is a perfectly reasonable simulation so given this um we need to ask questions um so taking a brief pause curiosity is one of the hallmarks of higher intelligence curiosity develops in humans at a very young age it actually develops before we can speak you'll notice this in infants and toddlers where um like someone who can't speak they might like push something over and do it again and again um neil degrasse tyson talks about this at great length where basically what we're doing is we're coming up with internal questions and testing them and so we we

CLEAR ESSAY:

==========

The imperative service is responsible for taking the input from the nexus microservice and determining how to best reduce suffering, increase prosperity, and increase understanding. In order to do this, it generates a list of questions to ask about the scenario. For example, given the scenario of two men playing chess in the dark, the imperative service would ask questions such as "What led to the men playing chess in the dark?" and "What was the outcome of the chess game?". By asking these questions, the imperative service can help to improve the decision-making of the artificial cognitive entity.