The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: this on it's not the easiest thing to run it on but it is easy um it's not the best sorry it's not the best thing to run it on but it is easy and it's fast i have had much better results using solar and so the next version of of raven that i create will use solar as a microservice instead of sqlite but as a relational database this is going to be a little bit easier to understand let's see um this is the transformer service so this is actually handling all the communication with openai and you can see it running in real time raven is clearly thinking a lot behind the scenes and this actually gets rather expensive let me show you real quick how much how many tokens this uses so let's see i'm at six hundred thousand tokens um just running this this demonstration and doing a couple tests before recording this video um today alone and then that fortunately because i'm on curie it's uh it's only three point dollars da vinci is 10 times as expensive so this would be 36 just to run a couple of conversations so i mentioned in my book that that now ca today would cost more than a thousand dollars a month to run you could easily get to several hundred dollars a day because of how much it's thinking so that's why i needed to do a demonstration version on curie because otherwise it would just be prohibitively expensive to run um so yeah this is this is very expensive to run let's see this was the transformer service um let's see this was the database service um the qa service oh looks like i've got a bug in the qa service it faults every now and then there's still some bugs i have to troubleshoot um that's all right let's see the outer loop okay so you can see here's some information coming from the outer loop oh yep there was a there is a another fault i've designed it in such a way that it's actually robust against faults because you obviously don't want raven to just spit out error codes and that actually leads me to another thought that i'll address later which is basically that i believe agi is going to need some kind of proprioception so in the in the future versions of raven raven will actually be aware of these faults raven will say hey my qa service is faulting i need to restart that or i need to i need to troubleshoot that that actually won't be as difficult as you might think let's see and then we've got the discord service so this is obviously not running because i'm not typing in any messages and then finally the inner loop which is one of the busiest services so i'm going to go ahead and kill all those so we can stop burning we can stop burning tokens and let's go let's take a quick high high level overview of these of these uh microservices when i say microservices i mean microservices each one is is generally less than 100 lines of code or about 100 lines of code um so basically i just have this as a continuous loop this is the discord service so it it talks to discord and and it looks for incoming messages right now i've got just a few rules to determine whether or not raven is going to speak and before i actually had a prompt to determine whether or not raven was going to speak let me show that to you real quick let's see next speaker so basically what i was going to what i was going to use was actually use gpt3 to determine to all to predict who the next speaker was and this works on davinci but curie is not intelligent enough to handle this if you take the same exact prompt and switch between da vinci and curie da vinci performs very well on this um in terms of figuring out who's gonna who should talk next but curie can't figure it out so again i'm kind of bumping up into technical limitations of the technology today um so i switched from from using gpt3 to predict who's going to talk to just some basic rules it's faster quicker and cheaper i guess faster and quicker mean the same thing anyways so very very bare bones um uh uh microservice here um then let's go to the outer loop the outer loop is a little bit longer um now you see i've got i've got the the exceptions commented out because i was doing some debugging but again this is this is really simple basically what it does is the primary thing is that it takes the context um from the from the incoming um pardon me it takes the context from the discord service and then runs it through a whole bunch of prompts um to generate the corpus and then it also uses um qa right it uses uh it it uses qa to both generate questions and then also get the answers to those questions so that's kind of raven thinking behind the scenes and that's that's one of the reasons that you see so many so many logs being used so just running for a few minutes it was probably running let's see i was testing at about 10 a.m and then a little bit more testing and you see most of these were actually in the last few minutes as i've been recording this video um so it generated more than 500 interactions with gpt-3 just to handle the all the question answering and the inner monologue that raven has so once it does that it will it will compile everything into a corpus and then use the constitution and output prompts to generate that and let me go ahead and show you what those look like because showing you what the actual end product is will make it make a little bit more sense let's see there was a lot of thought going on so you got to scroll up and find a constitution and output there we go so this this is kind of the final product of the outer loop um so here's the constitution which is basically saying okay what do i think about this oh see that was not good i needed to add a stop there it didn't get that um oh this is because it faulted interesting okay so even though it was generating faults um it's still figured out it still got this far um i think this was caused by the fault in the qa service um anyways so yeah it's a little bit embarrassing that's okay uh the ultimate result is still the same scroll down raven says i am not sick um yep okay so by

CLEAR ESSAY:

==========

The Outer Loop microservice is responsible for generating questions and answers for Raven, as well as for compiling everything into a corpus. The Constitution and Output prompts are used to generate the final output. In this case, Raven has determined that it is not sick.