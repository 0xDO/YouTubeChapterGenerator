The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: cases all right really only two rules um for raven to respond otherwise raven will just be listening and that's fine so this is the meat and potatoes of of raven right now um it is a python flask app that is 166 lines long so let's go through this this is this is quite a bit and um so like as promised this is a deep dive so this will take a little while so buckle in so right at the top starting raven nexus app host run port 9999 so i've got the one endpoint where you can post oh and that's what the the discord receiver does is it will send it it'll send um a message response send context and it'll post it to this other thing and i've got a timeout set to 45 so that it'll wait for the response all right so the discord receiver will send it over to the nexus it gets it here and so then there's two there's two components there's the context and then the wake sentence which are passed along so the wake sentence is just which whichever line in the chat log had the wake words in it and then what happens is i do a whole lot of parallel stuff so this generates a synopsis history feelings so on and so forth this is just a bunch of code so let me show you what it's actually generating so this is this is creating what i call the corpus and the corpus is let me open a better file better example uh let's see the corpus is yes it's going to be in here so the corpus is what i call raven's working memory so let me zoom in on this a little bit so here's a corpus the corpus will contain it's got a few sections so it's got the history which the history i'll show you how that that how that's pulled together it's got a synopsis which summarizes the conversation as it is right now uh it it has a um an emotional uh affect or a mood uh inference so it it it so raven understands how people are feeling it's got a few interesting facts that raven can add in spontaneously and then it's got the core objective functions which is this needs a lot of work because it's not really working core objective function one is about suffering and of course you don't see any any example of of describing suffering here objective function two is about prosperity and you know this is this is okay it's a boilerplate thing where it says the participants are not prosperous because they are unable to fill their fulfill their natural desires like that's really generic uh so these need a lot of work uh let's see objective function three is about understanding khajiit is trying to understand what raven is that's a natural conclusion because i'm asking raven a lot of questions and then it says khajiit should ask raven to tell them more about agis or read up on them so that's actually really good because core objective function 3 says the goal is to increase understanding so that's a that's actually a really good recommendation and then the chat log is raven what am i so that is the corpus so the corpus is what's fed in as the final kind of thing saying okay raven this is this is the conversation this is your working memory give me an output and this is the output from that last one you're a person i'm sorry i didn't answer your question sooner there are many types of artificial intelligence but i am not one of them so you see this this entire block this entire corpus was what was used to generate this output okay so i know even with some of the flaws here there there's a lot of there's a lot of room for improvement so at the top of this log is the context so this is the context that was sent over from the discord receiver so raven ultimately brought this in was able to summarize this so the synopsis right here you see is a summary of this and then the history is actually pulled from solar so solar i've got running here and here's an example of what solar looks like as as all the logs are just stored and that's how the history service works so the history service is actually one of the most important services so let me show you how the history service works alright so get relevant history you pass it the context and if you recall the context oops the context is just this this is just the conversation the chat log so i pass i pass this the context and it says get get search topics so i get search topics through this method prompt let's see where is it prompt understanding prosperity keywords there we go so i passed gpt3 literally just this or i say generate a list of keywords based on the following and here's an example of what it looks like gpt3 logs um let's see let's go down to the bottom interesting understanding suffering feelings prosperity keywords there we go so here's an output from gpthree i say generate a list of keywords from the following log so here's the chat log raven what am i and then keywords agility computer cyberspace decision human program confusion so these are some keywords that raven came up with to use to search his history based on based on his past and what that does is it searches uh it searches solar right which is running here here so it searches solar for those keywords obviously uh cert document search is its own is an entire art form the history service is is super critical so i'm going to need to do a lot of work on that in the long run but for now it's working good enough uh so it generated so going back keeping it all tied together so i got i got keywords i got topics and then for topic and search topics i went and searched solar and i accumulated all the memories together and then what happened after that was i sorted and deduplicated the memory so that they're all in chronological order and there's no duplicates and then i summarize each memory and put it together and so that's how you ultimately get the history section so raven recalled a whole bunch of memories and then summarized them all one problem that i need to fix for this and and i mentioned this in the chat log is that raven is recalling and and summarizing memories whether or not they're relevant to the current conversation so i'm going to

CLEAR ESSAY:

==========

The raven app has two main rules: respond to input, or listen. If a user posts something to the app, it will generate a response based on the context and wake sentence provided. The app will also keep track of past conversations in a corpus, which it can use to generate more relevant responses in the future.

The app is 166 lines long and written in python flask. It has one endpoint where users can post input, and a timeout of 45 seconds to wait for a response. The app uses the discord receiver to send messages back and forth.

The app generates a synopsis, history, and feelings for each conversation. It also has a chat log, which it uses to keep track of past conversations. The chat log is used to generate the output for each conversation.

The app is still in development and needs more work on the history service and the core objective functions. However, it is already able to generate relevant responses based on past conversations.