The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: embeddings are going to be implied here so we don't need to test that um actually no that's fine so result content equals payload content so that'll bomb and then because if if the content isn't there then the embedding won't work so the result vector let's see result would i say microservice equals payload microservice and then what did i say let's see what are we going to add a model right we need a model result model equals payload model and there's a reason for doing each one of these independently rather than just saying result equals payload is because this assumes that all the correct keys are in there so that's bad so this is bad does not help um so what we're doing here is we're um validating the payload all right so we'll validate the payload so we instantiate a new container and we try and pull everything that we need into it so we got content microservice model and then um i think i'll do context because like category or type is too is too narrow because context for the context for a message it might not be like um you know it might be a conductor message right the conductor says uh like might issue its own i'll show you later um so content the only problem here is content and context um are the same word with one letter difference so that could get confusing hmm because model microservice content those are all very distinctive vector time uuid very distinctive content and context are very similar um all right yeah i'll use type um hell with it okay i think this should work um let's see so validate message that's done model done vector done microservice vector yes all that's done save log and we'll do result print result whoops no print result not save log irma gerd i had the wrong thing okay successfully added record okay so that should work um let's go ahead and test this so so we'll do uh python why does this look weird there we go python nexus 2 please don't explode yep so it's downloading um yes okay so this um this is a very frequent error message if you use the tensorflow and so this the the fix for that is you um you go to that and then you just delete this folder um i don't know why that happens but obviously like yeah it's a pain in the neck so basically you you do the file is there it just for whatever reason tensorflow hub can't find it and also so this is really fast it's like 20 milliseconds per inference um even on cpu and it can be even faster on gpu um but like at 20 milliseconds like i don't care um once i have a dedicated um platform so like if i'm running this on say for instance um a jets and nano or whatever um then that might make more sense because then you've got you've got a dedicated platform but again this is still experimentation these are also going to be run as containers containerized microservices so if it doesn't need any custom underlying hardware then that's also really good because from an infrastructure perspective if you can run a container on any underlying compute um that's it's it's more portable whereas if it has special hardware requirements such as a gpu that's going to limit your abilities to do stuff um cd nexus this is what i do professionally so that's why i know that um and i was just at a vmware explorer so um i have a lot of insight as to where the industry is heading in terms of in terms of edge compute and ai hardware it's going to be a wild ride we're going to be running large language models inside of offices and stores within three years probably two years honestly with the way things are going okay uh so then we'll do python test two this should bomb says model yeah i bet that didn't i bet that didn't work um yeah because it's missing things so if we go and look at test two i don't have the right things okay so i don't need vector because that's going to be added so content bacon microservice test model equals um we're just going to say n a because there is no model here there is no spoon um actually here there's no spoon um and then the other thing that i needed was type um and so the type here is going to be um this is just going to be a a a test okay and then let's add a time from time import time and then we'll see how long this takes um oops we don't need to instantiate that every time so we'll do start equals time end equals time actually no we don't need that so we'll just be print time minus start there yay look optimizing why do you think why do something in two lines of code when you can do it in one that can get away from you especially with powershell where you can chain things end to end and do one-liners just because you can do a one-liner doesn't mean you should do a one-liner okay so let's test this real quick this is not the most helpful output but it was enough of a clue to tell me where it bombed because it got to this point and it's like hey this is missing okay um let's try it again that input must be a vector got shape zero i think i knew where that i know where that bombed i think that bombed on the embedding yep i bet that's where it failed i bet that's where it blew up hey hoss okay so payload content so let's do this so let's just wrap it in a list so that it's a string inside of a list and also let's switch to result content yeah so we use payload you see it's only used here and then it's used there but then ever after we use result so that way it may we make sure that every microservice gives you the necessary information otherwise you want it to kick that back out because it's like no go away you didn't use you didn't you didn't fill out the blue form that requires a blue form a gold star to whoever gets the reference your blue okay all right test and then it's gonna blow up again oh hey look at that okay um yeah so it took 0.03 seconds so 30 milliseconds on average 28 29 32 33 so 30 milliseconds on average to send a message to the nexus and build the um and build the embedding and and send back a confirmation um and so here you see we have a whole bunch of new logs and this is what the

CLEAR ESSAY:

==========

Embeddings are implied in this context, so there is no need to test for them. If the content is not present, then the embedding will not work. As such, the result vector will be populated by the payload content, which will cause an error. This is due to the fact that all the necessary keys may not be present in the payload.

To validate the payload, a new container is instantiated and all required information is pulled into it. This includes the content, microservice, model, and context. The only issue here is that content and context are very similar words, which could cause confusion.

Once the payload is validated, the message is logged and a confirmation is sent back. On average, this process takes 30 milliseconds.