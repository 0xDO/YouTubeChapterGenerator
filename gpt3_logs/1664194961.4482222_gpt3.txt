The following is an unstructured video transcript by David Shapiro. Please rewrite this as a more structured, clear essay.

TRANSCRIPT: to count so if you only want the top five it'll just say okay here's the top five send them back and then we'll return i why am i doing that i don't need i want to send back the whole thing um and so then if but so here's the thing sometimes you might be searching something that is very small or the count that you want is going to be wrong and so i want it to just send it back anyways okay is this ready for testing maybe it is it still feels wrong i've done something horribly wrong i know that did i have a test in my uh old moragi code maragi in it pi static no this this is it dang okay i could have sworn i had some test some test stuff in there um yeah so fetch send and then what do i do next um okay so then if name equals main so then we say um bdb equals vdb do i have to put the parentheses in i don't remember i don't think so let me look at the uh oh it's so it's import moragi moragi server oh wait okay since it's declared here where am i where am i going i think it's just this okay um so when it's instantiated it's an empty list let's go ahead and add another function def purge self because i know this is going to be a function so we'll do self.data equals list that's fine um and then we'll probably need a like save function so that'll be pretty simple def um save and we'll do self and then file path uh and that'll be basically all we'll do is just save the list so we'll do with open file path uh right binary as out file and it will do pickle dot save let's see if i remember um at least self.data and then out file let me check the docs to make sure i did that right pickle python tutorial i'm trying to do all this from memory it's been a little while sorry um real python pickle dot save no pickle dot dumps okay object file okay pickle dot dump and then it's object file okay so it's self.data out file that's fine that should be good and then def load will be self and then file path and i will say with open well here just copy this it's basically the same function um pickle dot load file yeah so um self dot data equals pickle dot load and we'll change this to infile okay save load purge um add search we probably ought to have like a remove so like dell so like def dell um def dell self um and then you'll say like let's see how do we want to identify um we'll say uh feel field and value um okay so oops def dell oh wait no delete is uh there we go okay so we'll say um for i n self.data um try if i field equals value a equals self.data wait how do you do pop um dot pop i i think that's how you do it python pop list item so let's pop the in that index let's see python removes specific item from list without index i think it's remove is what i want the given very first element matching yeah okay i think that's the one that i want to do yeah so remove it's just something that matches that okay that's the one i want um so data dot remove i and it doesn't return anything does it yeah okay so we can so if it matches and then um if that whole thing fails we'll just say accept continue oops we don't need to duplicate that continue um and so this will delete everything that matches that specific value so if you have a vector or a timestamp so that that'll be that'll be one of the best ways so with a unix timestamp there's so many there's so much precision that um that you can basically treat a unix timestamp as a uuid um not always it's entirely possible that you'll get something um at the same exact time but let me show you how precise um this is uh let's see from time import time and so then you just do time and you see it goes out to one two three four five six seven seven precision so that's um uh let's see that's millionths of a second so um that's pretty pretty darn precise um the likelihood of getting two exact uh two exact um timestamps that are that are identical is very very low it's not it's non-zero right you can still it can still happen whereas so originally what i would do is um let's see from uuid import uuid 4 i think and then so then you do print string eu id4 and so what you can do is uuid uuid v4 is universally unique identifier version 4. there are enough uuid v4s that you can address i think every atom in the universe and so every time you run this it is it is pretty much guaranteed to be unique in the entire existence of all of history so if you want something that is guaranteed to be unique use uuid 4 it's quick and easy and you can see there's no real pattern to it um you know it's not like a burned in address it is there's a lot of stuff going on behind the scenes to ensure that it is pretty darn random um but you know there's also nothing wrong with just using time um for our intents and purposes time will suffice um yeah so if you if you pass in a field like you know if this is like um if field equals time or time stamp or whatever it is then um we'll just say timestamp um then uh then value might be and we'll just copy paste this so you're guaranteed to be like almost almost guaranteed to be 100 unique um let's see let's do first only equals false and so then what will happen is um so then we'll do a test if first only and so this is implicitly true if first only um then we'll just do return which means that like okay delete only the first one so we'll have this function available to us in case we want to only delete the first one that matches ideally in the future we'll have we'll have multiple things that allow you to to delete something but you know for again for our intents and purposes we'll say we'll use timestamp as the equivalent of our uuid that'll allow you to zero in on one we can you can also always add uuid back right there's nothing preventing you from having uuid could be in the payload to be in payload use it if you want um i think yeah it's up to you um and then you have you know whatever vectors uh will will have your similarity okay so um so now we need to load this up with something what do we load it up with uh let's do um let's go look at the feis

CLEAR ESSAY:

==========

The moragi code contains a function to delete data based on a specified field and value. If the "first only" parameter is set to true, only the first instance of the matching data will be deleted. The code uses a unix timestamp as the equivalent of a uuid to ensure uniqueness.